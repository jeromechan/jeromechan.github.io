<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-07-22T18:00:00+08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>如何快速选择开源软件协议</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/22/easy-chosing-opensource-license/"/>
    <id>http://blog.url.com/2016/07/22/easy-chosing-opensource-license/</id>
    <published>2016-07-22T18:00:00+08:00</published>
    <updated>2016-07-22T22:18:51+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/14691964599348.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;一、背景介绍&lt;/h3&gt;

&lt;p&gt;目前开源协议有很多，同一款协议也衍生出了许多变种。开源世界中，我们可以使用合适的开源协议，保证自己作品的版权。&lt;br&gt;
我们这里不做过多的介绍，只介绍一些自己常用的三个选择及其理由，以供参考。&lt;/p&gt;

&lt;h3&gt;二、详细描述&lt;/h3&gt;

&lt;h4&gt;2.1 “我需要一个简单宽松的协议”&lt;/h4&gt;

&lt;p&gt;MIT License是一个简短、宽松、自由的协议。该协议允许人们使用你的代码，但必须要保留你的版权信息。与此同时，并不会给你带来任何责任和风险。&lt;code&gt;jQuery&lt;/code&gt;,&lt;code&gt;.NET Core&lt;/code&gt;和&lt;code&gt;Rails&lt;/code&gt;使用的均是MIT License。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The MIT License (MIT)
Copyright (c) &amp;lt;year&amp;gt; &amp;lt;copyright holders&amp;gt;

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.2 “我更加关心自己的专利”&lt;/h4&gt;

&lt;p&gt;Apache License 2.0是一项和MIT License相似的协议，但自己希望自己的专利能在开源免费使用的同时，保留自己在开源产品中的专利权益。同样，该协议要求使用者必须保留你的版权信息。&lt;br&gt;
&lt;code&gt;Android&lt;/code&gt;, &lt;code&gt;Apache&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;使用的均是Apache License 2.0协议。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Apache License Version 2.0
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.3 “我关心代码的分享以及促进”&lt;/h4&gt;

&lt;p&gt;如果你希望别人在分享的自己的作品之后，也必须遵循相同的协议，也必须是开源和免费。那么GPLv3是你更好的选择。该协议当中也明确地包含了贡献人的专利权益方面的款项。原作品的版权条款也必须延续保留。GPL协议存在非常强的“传染性”
&lt;code&gt;Bash&lt;/code&gt;, &lt;code&gt;GIMP&lt;/code&gt;和&lt;code&gt;Privacy Badger&lt;/code&gt;使用的均是GPLv3协议。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GNU GENERAL PUBLIC LICENSE Version 3
Copyright (C) {year}  {name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的产品是基于终端的，你还可以加上如下一段，使得使用者知晓如何可以联系到你。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;project&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;Copyright&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(C)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;year&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;program&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;comes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ABSOLUTELY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;NO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;WARRANTY;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;details&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;w'.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;software,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;welcome&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;redistribute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;certain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;conditions;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;c'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;details.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;三、参考资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Opensource License：&lt;a href="http://choosealicense.com/licenses/"&gt;http://choosealicense.com/licenses/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;各种开源协议介绍：&lt;a href="http://www.open-open.com/solution/view/1319816219625"&gt;http://www.open-open.com/solution/view/1319816219625&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开源那么重要，开源协议你认识吗？&lt;a href="http://yeyuan.baijia.baidu.com/article/43303"&gt;http://yeyuan.baijia.baidu.com/article/43303&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>解决fastjson反序列化日期0000-00-00失败的方案</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/22/resolve-the-fastjson-problems-about-date/"/>
    <id>http://blog.url.com/2016/07/22/resolve-the-fastjson-problems-about-date/</id>
    <published>2016-07-22T17:00:00+08:00</published>
    <updated>2016-07-22T22:11:47+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h4&gt;一、案例场景复原&lt;/h4&gt;

&lt;p&gt;示例场景里涉及两个class：&lt;code&gt;TestDemo.java&lt;/code&gt;, &lt;code&gt;DateBeanDemo.java&lt;/code&gt;。&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// DateBeanDemo.java&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DateBeanDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * dateStr field with Date.class
     */&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;dateStr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Get dateStr &amp;lt;br&amp;gt;
     *
     * @return Returns the dateStr. &amp;lt;br&amp;gt;
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="nf"&gt;getDateStr&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dateStr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Set dateStr &amp;lt;br&amp;gt;
     *
     * @param dateStr The dateStr to set. &amp;lt;br&amp;gt;
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDateStr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;dateStr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dateStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dateStr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 示例执行例子&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{\"dateStr\":\"0000-00-00\"}"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DateBeanDemo&lt;/span&gt; &lt;span class="n"&gt;resultObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsonStr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateBeanDemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以上的main方法之后，并没有获取预期的结果，而是在fastjson的序列化解析中便发生了异常，如下&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exception in thread "main" com.alibaba.fastjson.JSONException: For input string: "0000-00-00"
    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:555)
    at com.alibaba.fastjson.JSON.parseObject(JSON.java:251)
    at com.alibaba.fastjson.JSON.parseObject(JSON.java:227)
    at com.alibaba.fastjson.JSON.parseObject(JSON.java:186)
    at excel.TestDemo.main(TestDemo.java:23)
Caused by: java.lang.NumberFormatException: For input string: "0000-00-00"
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
    at java.lang.Long.parseLong(Long.java:419)
    at java.lang.Long.parseLong(Long.java:468)
    at com.alibaba.fastjson.parser.deserializer.DateDeserializer.cast(DateDeserializer.java:56)
    at com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer.deserialze(AbstractDateDeserializer.java:98)
    at Fastjson_ASM_DateBeanDemo_1.deserialze(Unknown Source)
    at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:551)
    ... 4 more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过百度查阅了部分网上撰写的方案，可以使用fastjson中的注解&lt;code&gt;@JSONField(format=&amp;quot;&amp;quot;)&lt;/code&gt;来重新定义&lt;code&gt;DateBeanDemo.dateStr&lt;/code&gt;，如下：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JSONField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"yyyy-MM-dd"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;parseFeatures&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;AllowISO8601DateFormat&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;dateStr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而，并没有解决这个exception的问题。同时还怀疑了注解是否在反序列化之时没有被使用到，经过查阅源码，fastjson已将其反序列化的开关定义了&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Retention&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RetentionPolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RUNTIME&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Target&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;METHOD&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FIELD&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PARAMETER&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nd"&gt;@interface&lt;/span&gt; &lt;span class="n"&gt;JSONField&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;ordinal&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;deserialize&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 默认定义了true，反序列化之时也使用该注解&lt;/span&gt;
    &lt;span class="n"&gt;SerializerFeature&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;serialzeFeatures&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;parseFeatures&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;label&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;二、原因剖析&lt;/h4&gt;

&lt;p&gt;经查找fastjson中相关代码发现，当代码执行到&lt;code&gt;com.alibaba.fastjson.parser.deserializer.DateDeserializer.class&lt;/code&gt;的执行方法&lt;code&gt;cast()&lt;/code&gt;中之时，所使用的JSONParser中所含带的dateFormat依旧是默认的&lt;code&gt;yyyy-MM-dd HH:mm:ss&lt;/code&gt;，而并非注解@JSONField中所定义的&lt;code&gt;yyyy-MM-dd&lt;/code&gt;。
所以发生了转换字段失败。&lt;/p&gt;

&lt;p&gt;&lt;img alt="14691655278897" width="1552" height="776" src="/images/2016-07-22-resolve-the-fastjson-problems-about-date/14691655278897-9bc00afe.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;再深究一层，为什么不是@JSONField中所定义的&lt;code&gt;yyyy-MM-dd&lt;/code&gt;作为JSONParser中的dateFormat呢？其实仔细阅读一遍&lt;code&gt;cast()&lt;/code&gt;代码逻辑就会发现，并不是fastjson丢弃了JSONField的扫描，而是在方法中有这么一段：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 检查格式是否符合ISO8601的DateFormat规范&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;dateLexer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scanISO8601DateIfMatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;label122&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当执行到以上代码段之时，由于字符串&lt;code&gt;0000-00-00&lt;/code&gt;并不是ISO8601的DateFormat规范之内，故而代码便会&lt;code&gt;break label122&lt;/code&gt;执行跳出逻辑。紧接着执行的就是&lt;code&gt;DateFormat dateFormat1 = parser.getDateFormat();&lt;/code&gt;，此时，parser依然是global定义的parser，DateFormat并没有使用&lt;code&gt;@JSONField&lt;/code&gt;中所定义的。&lt;/p&gt;

&lt;h4&gt;三、解决方案：新增date反序列化解析器&lt;/h4&gt;

&lt;p&gt;解决方案并非只有一种，在众多解决方案中自己选择了&amp;quot;新增date反序列化解析器&amp;quot;的办法。除此之外还有诸如设置&lt;code&gt;JSON.DEFFAULT_DATE_FORMAT&lt;/code&gt;属性的办法，也同样可以解决这一问题。下面作两种办法的对比和阐述。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方案1：设置属性&lt;code&gt;JSON.DEFFAULT_DATE_FORMAT&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一方案只涉及修改&lt;code&gt;main()&lt;/code&gt;方法代码即可实现，&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 示例执行例子&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{\"dateStr\":\"0000-00-00\"}"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFFAULT_DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"yyyy-MM-dd"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;DateBeanDemo&lt;/span&gt; &lt;span class="n"&gt;resultObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsonStr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateBeanDemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是翻阅fastjson中对于&lt;code&gt;JSON.DEFFAULT_DATE_FORMAT&lt;/code&gt;可知，该属性属于静态属性，一旦设置影响全局。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// com.alibaba.fastjson.JSON.class
public abstract class JSON implements JSONStreamAware, JSONAware {
    public static String DEFFAULT_DATE_FORMAT;
    // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;方案2：新增date反序列化解析器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要思路是以fastjson原生的&lt;code&gt;DateDeserializer.class&lt;/code&gt;为基础，定制化一个可以解析&lt;code&gt;0000-00-00&lt;/code&gt;的日期反序列化解析器。&lt;br&gt;
该方式是fastjson函数&lt;code&gt;JSON.parseObject()&lt;/code&gt;的一个应用场景，通过定制化&lt;code&gt;ParserConfig&lt;/code&gt;参数，达到局部改变JSON解析逻辑的目的。&lt;br&gt;
如下：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;jeromechan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fixbug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fastjson&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.alibaba.fastjson.parser.DefaultJSONParser&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.alibaba.fastjson.parser.deserializer.DateDeserializer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.reflect.Type&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Copyright © 2016 Jerome Chan. All rights reserved.
 * An extended DateDeseializer for parsing '0000-00-00'.
 * 
 * @author chenjinlong
 * @CreateDate 7/20/16 5:55 PM
 */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JCDateDeserializer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;DateDeserializer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;JCDateDeserializer&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JCDateDeserializer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;JCDateDeserializer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultJSONParser&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;fieldName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;strVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strVal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strVal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0000-00-00"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDateFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yyyy-MM-dd"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 示例执行例子&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;jsonStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{\"dateStr\":\"0000-00-00\"}"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;        
        &lt;span class="n"&gt;ParserConfig&lt;/span&gt; &lt;span class="n"&gt;jcParserConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ParserConfig&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;jcParserConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putDeserializer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JCDateDeserializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;DateBeanDemo&lt;/span&gt; &lt;span class="n"&gt;resultObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jsonStr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateBeanDemo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jcParserConfig&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_PARSER_FEATURE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假设觉得这种解析办法可以作为整个项目内的全局特性，感兴趣的话可以将定制好的&lt;code&gt;JCDateDeserializer&lt;/code&gt;利用spring框架注入到项目容器中。这同样是对于方案2很不错的延伸。&lt;/p&gt;

&lt;h4&gt;四、参考资料&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;fastjson在github上的issues：&lt;a href="https://github.com/alibaba/fastjson/issues/414"&gt;https://github.com/alibaba/fastjson/issues/414&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>什么是架构</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/06/what-is-architecture/"/>
    <id>http://blog.url.com/2016/07/06/what-is-architecture/</id>
    <published>2016-07-06T17:00:00+08:00</published>
    <updated>2016-07-22T22:11:47+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="14678247250239" width="1782" height="364" src="/images/2016-07-06-what-is-architecture/14678247250239-7f1d5c82.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;先来看看老外们对于架构是如何诠释的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is Architecture?&lt;/strong&gt;&lt;br&gt;
Architecture is the &lt;strong&gt;art&lt;/strong&gt;,science, and profession of planning, &lt;strong&gt;designing&lt;/strong&gt;, and supervising the construction of new &lt;strong&gt;buildings, landscapes, communities&lt;/strong&gt;, and &lt;strong&gt;furnishings&lt;/strong&gt; in their totality, examining their environment in accordance with the &lt;strong&gt;principles&lt;/strong&gt; of utility, strength, and &lt;strong&gt;aesthetics&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上这段话虽然更适合解释建筑架构的含义，但是我们通过对比计算机工程类的架构的理念和要求，以上所提到的要点皆包含在内，不外乎生态不同罢了，其两者核心理念是相同的。&lt;/p&gt;

&lt;p&gt;最近日子在工作中遇到的关于“架构”的探讨上，今天来谈谈自己理解的所谓架构，想以此篇文字来端正一下自己。&lt;/p&gt;

&lt;p&gt;架构这词也是神圣不可侵犯的，如果你把一些b格很low的设计细节的东西当作是架构，那么毫无疑问，你正在掩耳盗铃。 
设计和架构有着鸿沟一般的区别。而跨越这条鸿沟,需要不断学习,不停积攒天赋,同时伴随着需 要量的积累。 设计,首先它是一个架构范畴中的一个很小的子集。处于一个很单元的层次,但它也同时是不可逾 越不可或缺的阶段。 &lt;/p&gt;

&lt;p&gt;而设计绝不等于架构。&lt;/p&gt;

&lt;p&gt;架构，不仅考量技术实现，还需要诸如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户关键业务点的理解&lt;/li&gt;
&lt;li&gt;如何将概念具体化&lt;/li&gt;
&lt;li&gt;项目目标和周期的估算&lt;/li&gt;
&lt;li&gt;如何多元化团队沟通协作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;层次高的还有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关乎项目战略目标的敲定&lt;/li&gt;
&lt;li&gt;如何在企业执行中追求更高roi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而技术实现方面也不仅仅是说项目如何搭建如何设计db，如何实现分包分模块，还不可或缺的需要包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何将项目平台化&lt;/li&gt;
&lt;li&gt;如何作冗余和可用架构而同时避免缠绕和蔓延&lt;/li&gt;
&lt;li&gt;如何用专业手段作架构沟通和透视&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于稳定系统的方面,如何去执行可持续治理也是所谓架构的关键点。 &lt;/p&gt;

&lt;p&gt;所以，只是挂在嘴边念叨“架构架构”而从不事先勘探落地,这种“理论架构”毫无用处，能体现项目 生产力、技术价值、团队骄傲的，才是我们所需要的真正架构。 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;真正懂架构的人，并不会把架构挂在嘴边&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;真正牛逼的架构师，从来都是拿实力和实例说话&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>说说使用middleman的那些事情</title>
    <link rel="alternate" href="http://blog.url.com/2016/07/02/talk-about-middleman/"/>
    <id>http://blog.url.com/2016/07/02/talk-about-middleman/</id>
    <published>2016-07-02T17:00:00+08:00</published>
    <updated>2016-07-22T22:11:47+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Draggedimage" width="1044" height="450" src="/images/2016-07-02-talk-about-middleman/DraggedImage-cf272ae8.png" /&gt;&lt;/p&gt;

&lt;h4&gt;一、什么是静态网站&lt;/h4&gt;

&lt;p&gt;随着互联网发展的脚步，现在的个人博客网站已经不再局限于国内几大门户网站所提供的博客撰写服务。
记得上大学那会儿，为了阅读一些名人诸如国民岳父韩寒、李承鹏、徐静蕾等博主的文章和思想，每天必定会上博客上转上两遍，翻阅近十篇进行阅读。那个时候的博客页面加载速度，在寝室512k的带宽状况下，简直令人没有了脾气。&lt;/p&gt;

&lt;p&gt;那个时候并没有太多纯静态网站的做法，有的是一些根据脚本生成指定的某些html页面，用于解决一些高流量访问的问题，例如门户站点的首页，其中只需要保持少量的动态加载元素，对付高流量高并发并不是困难的。&lt;/p&gt;

&lt;p&gt;而个人博客、企业宣传页面不同于上文的需求场景，其更新频率定期，没有过多的注册用户信息的管理，不涉及复杂的交互实现，只需要满足查看和评论的功能即可。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;评论功能自然是需要实现r+w操作的，但是现在已经存在了很多第三方协助托管评论信息的平台，例如国内的多说，国外的disqus。只需要开发者简单地嵌入少量html+js代码即可完成评论功能的实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;故而，纯静态网站应运而生，各类纯静态网站生成工具也出现了较大的发展前景。下面说道的middleman就是一个静态网站的generator工具。&lt;/p&gt;

&lt;h4&gt;二、放弃jekyll转投middleman&lt;/h4&gt;

&lt;p&gt;&lt;img alt="Draggedimage-1" width="494" height="208" src="/images/2016-07-02-talk-about-middleman/DraggedImage-1-701ed4ad.png" /&gt;&lt;/p&gt;

&lt;p&gt;这部分并不是说jekyll技术已经落后，而是从自身角度来看为什么自己会转投middleman。
自己是从2014年开始使用jekyll的，源于阅读了较多的大神yuguo对于前端栈的技术篇章，也就两年的光景，但是自己经历了从2.X版本变迁到3.X版本的过程。
对于为什么自己放弃jekyll转投middleman，下面分2点作出阐述。&lt;/p&gt;

&lt;p&gt;第一点，我们先来说说2.X到3.X版本的更迭细节。
&lt;img alt="Draggedimage-2" width="1466" height="798" src="/images/2016-07-02-talk-about-middleman/DraggedImage-2-8a534a98.png" /&gt;
以上变迁的情况说明，大家都知道，jekyll 2.X里包含了ruby和python两门技术，而以上的更迭看来，一方面减少了非必需包的依赖，留出了定制空间，移除了python的依赖。或许jekyll作者更喜欢ruby only吧。&lt;/p&gt;

&lt;p&gt;这些变更并不是向前兼容的，如果你的jekyll是2.X版本，请留意升级后带来的源代码修改的成本。虽然它不是向前兼容，但是升级过程并不会引入更多的包依赖，而恰恰是因为这点，_config.yml需要作出的变更会较多，例如coderay的highlighter引擎建议要更换为rouge；需要分页插件，则需要增加gems:[jekyll-paginate]作出依赖声明，等等。&lt;/p&gt;

&lt;p&gt;而这里包含了一点自己无法接受的变更，看官方声明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;!! Don&amp;rsquo;t set a permalink&lt;/strong&gt;&lt;br&gt;
Setting a permalink in the front matter of your blog page will cause pagination to break. Just omit the permalink.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上意思是说，如果你使用了pagination，那么permalink的使用会阻断pagination的执行。也就是说，如果你有一个分页列表的页面，因为你在该页面中使用了permalink改写路径，那么页面中的paginator.posts将会失效，页面内容也将加载失败。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- This loops through the paginated posts，if you had used permalink settings, the paginator parsing job will fail. --&amp;gt;
{% for post in paginator.posts %}
  &amp;lt;h1&amp;gt;&amp;lt;a href="{{ post.url }}"&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;p class="author"&amp;gt;
    &amp;lt;span class="date"&amp;gt;{{ post.date }}&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;div class="content"&amp;gt;
    {{ post.content }}
  &amp;lt;/div&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二点，就要说到liquid的语法。
我们来假设这么个场景，在一个列表加载的页面中，我们需要在循环内判断到达指定加载条目预设上限之时，循环执行break跳出。
这个场景使用liquid引擎是这么写的：&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;site.posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;plus:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;endif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;endfor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以这么写：&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;这句话可有可无，因为increment会将var初始化为&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;site.posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;increment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;这句话会自动执行一个print语句，将var打印出来&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;endif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;endfor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前者的写法让人觉得做一个简单的运算都需要去背记liquid的各种filters，让人觉得麻烦不已。
后者的写法会凭空多出一个默认的print效果，这个也是UI界面编写之时无法接受的。&lt;/p&gt;

&lt;h4&gt;三、为什么不选用WordPress等LAMP架构的博客框架&lt;/h4&gt;

&lt;p&gt;&lt;img alt="Draggedimage-3" width="890" height="218" src="/images/2016-07-02-talk-about-middleman/DraggedImage-3-2e91c8e7.png" /&gt;&lt;/p&gt;

&lt;p&gt;作为一名php开发者，wordpress是必须鼓捣的框架之一，但是为什么最终放弃了选用wp作为个人博客首选呢？
原因其实不复杂，主要有以下五个方面：&lt;br&gt;
1. 涉及数据库技术，数据的灾备流程过于复杂，维护时间成本高；&lt;br&gt;
2. wp框架体量重，适合开发较大型的cms内容管理站点，对于个人博客有点大材小用，如同杀鸡用了牛刀；&lt;br&gt;
3. 扩展插件多是其亮点，同时也是拖慢wp站点的一大坑点，php的通用单线程处理机制决定了其瓶颈，就算升级了鸟哥的php7估计也根治不了多扩展插件wp站点的加载时长的问题；&lt;br&gt;
4. 需要关注的安全问题较多，可定制化有限，如果不合适的定制会引发无法升级的问题；&lt;br&gt;
5. 需要一台VPS或者Web Host主机，也就是将多出一份硬件方面的开销，如果要求访问稳定、连接速度可接受的主机，购买价格也会逐级上升。   &lt;/p&gt;

&lt;h4&gt;四、简明middleman实践之路&lt;/h4&gt;

&lt;h5&gt;4.1 由于middleman是ruby语言的作品，先了解以下关于ruby语言的关键概念。&lt;/h5&gt;

&lt;p&gt;&lt;img alt="Draggedimage-4" width="666" height="156" src="/images/2016-07-02-talk-about-middleman/DraggedImage-4-eb29f565.png" /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ruby：顾名思义，指的就是ruby语言。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rvm：全名ruby version manager，注意它和jvm不是一个含义哦。rvm是管理ruby本身，也包含了ruby插件的管理。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rails：指的是ruby著名开发框架，认识ruby的人都认识它。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rubygems：ruby程序包管理器，可以将ruby程序打包成gem，作为一个独立安装单元安装到计算机中。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;gem：指的是封装起来的ruby应用程序，或者代码库。终端中使用的gem命令，是指使用rubygems安装程序应用。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;gemfile：配置文件，用于定义指定应用所依赖的包，然后可以提供给bundle命令执行，类似于shell命令中的.sh脚本。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rake：该程序包是ruby所需要安装的包中最为关键的一个。rake是一个ruby的构建工具，类似于Make、ant、maven、gradle不等。rakefile便是其执行的构建任务配置文件，其中涉及特定的DSL撰写方式，类似于groovy在gradle中的应用一样。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;rakefile：rake构建任务中所涉及的任务配置文件。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;bundle：等同于批量执行gem命令，配置好gemfile之后，使用bundle install可以实现包，及其依赖包的自动下载与安装。&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;4.2 middleman的安装疑问&lt;/h5&gt;

&lt;p&gt;middleman依赖于rubygems、bundle、gemfile、rake等工具或框架。在安装一系列ruby依赖库的过程中，会遇到connection fail，error loading，can’t be found等问题，这些问题的原因是因为&lt;a href="https://www.rubygems.org"&gt;rubygems.org&lt;/a&gt;在国内访问不稳定的缘故。  &lt;/p&gt;

&lt;p&gt;正所谓兵来将挡，水来土掩，方法总是比困难要多得多。&lt;br&gt;
国内的大淘宝，还有ruby-china官方，都给大家做了一个同步频率为15mins的ruby gems的镜像，我们可以将自己本地的ruby gems、bundle源配置切换到国内。&lt;br&gt;
参见这里：&lt;br&gt;
- ruby-china官方源：&lt;a href="http://ruby-china.org"&gt;http://ruby-china.org&lt;/a&gt;&lt;br&gt;
- 大淘宝的镜像源：&lt;a href="http://ruby.taobao.org"&gt;http://ruby.taobao.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在安装各项依赖之时，建议先配置好gemfile，然后使用命令bundle install自动实现下载和安装，而不是使用middleman server逐项发现缺失库，因为从操作效率上是得不偿失的。&lt;/p&gt;

&lt;h5&gt;4.3 slim VS liquid&lt;/h5&gt;

&lt;p&gt;&lt;img alt="14674858884718" width="325" height="342" src="/images/2016-07-02-talk-about-middleman/14674858884718-5f9b669f.png" /&gt;&lt;/p&gt;

&lt;p&gt;关于liquid的一些用法和自己不感冒之处，前面已经提及了部分，这里不再大施笔墨赘述。
这里说说slim的情况。&lt;/p&gt;

&lt;p&gt;liquid是jekyll默认配置的官方模板引擎，而slim也是middleman首推的前端引擎。
liquid有很多晦涩不易入门的语法结构，而slim相对而言就显得优雅了许多。&lt;/p&gt;

&lt;p&gt;slim所倡导的是，一切页面元素、样式、js均可结构化。使用slim可以大大简化前端页面渲染的逻辑实现结构，没有了liquid般的html+js+liquid+css混合搭配在.html文件里使用的尴尬，映入眼帘的均是层次分明，结构清晰的模板语法。&lt;/p&gt;

&lt;p&gt;下面作一下两者的对比，孰好各位看官心中自有结论。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;html+js+css+liquid混合应用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- html+js+css+liquid混合应用 --&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="theme-color" content="{{ page.color }}"&amp;gt;
    &amp;lt;link rel="stylesheet" href="{{ "/assets/css/main.css" | prepend:site.baseurl }}"&amp;gt;
    &amp;lt;link rel="canonical" href="{{ page.url | replace:'index.html','' | prepend:site.baseurl | prepend:     site.url }}"&amp;gt;
    &amp;lt;link rel="alternate" type="application/rss+xml" title="{{ site.title }}" href="{{ "/feed.xml" | prepend: site.baseurl | prepend: site.url }}" /&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;slim的前端结构&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- html+js+css+slim混合应用 --&amp;gt;
doctype html
html lang="ja"
  head
    meta charset="utf-8"
    title The Elevatorpitch
    meta name="viewport" content="width=device-width, initial-scale=1.0"
    css:
      body {
        padding-top: 20px;
        padding-bottom: 40px;
      }
  body
    div class="container-narrow"
      div class="masthead visible-desktop"
script src="/js/theelevatorpitch.js"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多slim应用可以关注我的gist：&lt;a href="https://gist.github.com/jeromechan/0432a89f3e9810e9ba26052606e56f38"&gt;Use slim engine for building html tags&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;五、Try the way you like&lt;/h4&gt;

&lt;p&gt;前端技术的不断发展，纯静态网站的性能问题也逐步被放大，在我们使用静态网站生成工具的同时，性能问题也一定需要着重考虑。
例如，gzip压缩、js+css压缩、单次加载批量样式文件和js文件、html页面布局层次简化、js依赖关系处理、css继承关系的整理、前端cache/data等缓冲区域技术的应用、异步ajax请求时长的监控、sass/less的样式结构简化和预处理，等等方面。&lt;/p&gt;

&lt;p&gt;只要始终坚持用户至上，读者至上的原则，一定能够找到最适合自己预想的方案。&lt;/p&gt;

&lt;p&gt;前面所涉及的参考资料有如下，感兴趣可以自己翻翻看看：&lt;br&gt;
- &lt;a href="https://shopify.github.io/liquid/"&gt;Liquid官方文档&lt;/a&gt;&lt;br&gt;
- &lt;a href="http://jekyllrb.com/docs/pagination/"&gt;Jekyll关于pagination说明&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://middlemanapp.com/basics/install/"&gt;Middleman官方文档&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://www.reddit.com/r/Jekyll/comments/3uhk2j/cant_get_pagination_working_with_jekyll_301/"&gt;Jekyll中paginate与permalink的冲突&lt;/a&gt;&lt;br&gt;
- &lt;a href="http://blog.virtuacreative.com.br/upgrade-jekyll-2-to-3-gh-pages.html"&gt;Upgrading Jekyll 2 to 3 on GitHub Pages&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://gist.github.com/jeromechan/0432a89f3e9810e9ba26052606e56f38"&gt;How to use slim engine for building html tags？&lt;/a&gt;   &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>学习笔记：项目管理之规划项目</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/30/how-to-make-a-project-plan/"/>
    <id>http://blog.url.com/2016/06/30/how-to-make-a-project-plan/</id>
    <published>2016-06-30T08:00:00+08:00</published>
    <updated>2016-07-22T22:11:47+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;一、回顾基础知识&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;项目经理：把控“完成”的含义，并带领团队完成项目的人；&lt;/li&gt;
&lt;li&gt;项目的关键驱动因素、约束和浮动因素；&lt;/li&gt;
&lt;li&gt;传统铁三角：成本 + 时间 + 质量/范围；&lt;/li&gt;
&lt;li&gt;通过沟通发掘决定项目的关键驱动因素；&lt;/li&gt;
&lt;li&gt;少用“为什么”，避免“怎么做”，项目如何才算成功；&lt;/li&gt;
&lt;li&gt;探讨制定项目章程，有助于凝聚团队；&lt;/li&gt;
&lt;li&gt;从“摩尔鸿沟”表象，看项目、团队发展历程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;二、引导语&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;“项目规划是在不断进行的，这只是开始。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;三、纲要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如何踏上项目征程&lt;/li&gt;
&lt;li&gt;讲解开发项目规划模版条目&lt;/li&gt;
&lt;li&gt;项目如何才适合发布上线&lt;/li&gt;
&lt;li&gt;发布条件的管理&lt;/li&gt;
&lt;li&gt;最后的几句总结&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;四、辨析两句短语&lt;/h3&gt;

&lt;p&gt;&lt;img alt="14673084562094" width="520" height="116" src="/images/2016-06-30-how-to-make-a-project-plan/14673084562094-46f84796.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;五、使项目踏上征程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;规划不必完美无缺，实际上这也是做不到的；&lt;/li&gt;
&lt;li&gt;采用时间盒子的方式启动项目的规划；&lt;/li&gt;
&lt;li&gt;要根据经验而不是预言来规划项目。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;“规划毫无用处，但是制定规划必不可少。”
——艾森 · 豪威尔
&lt;img alt="14673086699212" width="296" height="241" src="/images/2016-06-30-how-to-make-a-project-plan/14673086699212-c3003423.jpg" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;六、开发项目规划模版&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;下面介绍一些常用的模版条目 …&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;产品意图&lt;/li&gt;
&lt;li&gt;发布历史记录&lt;/li&gt;
&lt;li&gt;发布条件&lt;/li&gt;
&lt;li&gt;项目目标、时间盒子目标&lt;/li&gt;
&lt;li&gt;团队职责、项目运作的组织&lt;/li&gt;
&lt;li&gt;项目日程总览&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- 样式1

![](/images/2016-06-30-how-to-make-a-project-plan/14673089688628.jpg)

- 样式2

![](/images/2016-06-30-how-to-make-a-project-plan/14673090092803.jpg)

- 样式3

![](/images/2016-06-30-how-to-make-a-project-plan/14673090209493.jpg)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;人员配备&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建议日程&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;样式1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="14673090942241" width="335" height="153" src="/images/2016-06-30-how-to-make-a-project-plan/14673090942241-9ce8a1bf.jpg" /&gt;
- 样式2&lt;/p&gt;

&lt;p&gt;&lt;img alt="14673091056258" width="319" height="135" src="/images/2016-06-30-how-to-make-a-project-plan/14673091056258-e09f5023.jpg" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;温馨提示：小心过早细化日程
&lt;img alt="14673091416870" width="324" height="258" src="/images/2016-06-30-how-to-make-a-project-plan/14673091416870-51d4fba0.jpg" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;9.制定项目风险列表 
&lt;img alt="14673092036240" width="358" height="191" src="/images/2016-06-30-how-to-make-a-project-plan/14673092036240-3ea63458.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;七、制定发布条件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;发布条件可以告诉我们项目“完成”的含义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;八、拟定步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;确定当前发布的最重要的因素（包含关键驱动因素）&lt;/li&gt;
&lt;li&gt;草拟发布条件&lt;/li&gt;
&lt;li&gt;修订发布条件，使其符合SMART原则&lt;/li&gt;
&lt;li&gt;达成多方共识&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;九、SMART原则&lt;/h3&gt;

&lt;p&gt;&lt;img alt="14673093012558" width="484" height="176" src="/images/2016-06-30-how-to-make-a-project-plan/14673093012558-ec7999f0.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;十、使用发布条件&lt;/h3&gt;

&lt;p&gt;&lt;img alt="14673093575826" width="198" height="152" src="/images/2016-06-30-how-to-make-a-project-plan/14673093575826-48973fb4.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;十一、关键知识点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;项目规划实在不断进行的，这只是开始；&lt;/li&gt;
&lt;li&gt;为项目团队、出资人和项目经理自己制定发布条件，以明确定义“完成”的含义；&lt;/li&gt;
&lt;li&gt;项目规划不必完美无瑕，但是它必须存在。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;十二、结束语&lt;/h3&gt;

&lt;p&gt;&lt;img alt="14673094267010" width="526" height="407" src="/images/2016-06-30-how-to-make-a-project-plan/14673094267010-17f9896d.jpg" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Git软件开发过程</title>
    <link rel="alternate" href="http://blog.url.com/2015/11/16/work-in-git/"/>
    <id>http://blog.url.com/2015/11/16/work-in-git/</id>
    <published>2015-11-16T17:51:05+08:00</published>
    <updated>2016-07-22T22:11:47+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h4&gt;一、关于Git与Subversion的区别&lt;/h4&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage1.png"&gt;&lt;img alt="Draggedimage1-1024x1013" width="1024" height="1013" src="/images/2015-11-16-work-in-git/DraggedImage1-1024x1013-d44ce92f.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;二、目前我们用Subversion是怎么执行软件过程的&lt;/h4&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage-1.png"&gt;&lt;img alt="Draggedimage-1-1024x437" width="1024" height="437" src="/images/2015-11-16-work-in-git/DraggedImage-1-1024x437-54dc8e74.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;三、优势与缺点&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;架构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Git：分布式，所有的teammates本地可以clone一份独立完整的仓库，而不仅仅是某一个版本的镜像拷贝；开发者可以在本地clone仓库中完成所有vcs的操作，只有当需要协同工作提交代码到远程仓库的时候，才需要联上网络。


* Subversion：中央集中式，所有的teammates都面向同样一个远程仓库工作；checkout出来的本地工作区代码只是远程仓库某一版本的一份镜像拷贝。
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;仓库结构与URL&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Git：对于Git而言，仓库会独立于开发者的本地磁盘中，在仓库的根目录中只包含了一个”.git”文件夹，所有的branches、trunk(PS：git中名称为master)、tags均是通过命令操作而生成的，并非通过URL路径。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Git中，URL类似于ssh://&lt;a href="mailto:git@example.com"&gt;git@example.com&lt;/a&gt;/path/to/git-repo.git，仅仅是指向了仓库的一个标识。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Subversion：分支的url类似于svn+ssh://svn@example.com/svn/trunk，每一个分支独占一个唯一URL，每一个URL都会直接定位到每一个分支在远程仓库中的路径位置。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于Subversion，会有一个trunk分支作为开发主线分支，会有很多branches分支作为并行分支，tags则是mark上某一特定的发布版本。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;分支管理&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Git：Git分支相对于其他的vcs是非常不一样的设计理念，一个Git分支仅仅指的是指向某一确定版本的简单指针，因此，Git的分支是无拷贝、无新建目录、几乎无开销的。


* Subversion：正如我们所知道的，SVN中的分支仅仅是项目的一份拷贝，是一个具有特殊含义的普通文件夹；多分支则是多文件夹的形式。
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;提交操作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Git：若你使用的是Git，你的提交操作不受网络的影响，你的提交仅仅影响了本地仓库，仅当你需要于远端仓库同步内容之时，才需要使用到网络；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外的，在你本地仓库还存在一个so-called Staging Area，并非你的所有文件需要在一次提交中全部commit，你可以选择指定的变更放入staging area中，从而在本次提交中仅仅包含你所选定的变更条目；
关于Git的版本号，大家都知道，Git是分布式的vcs，要想和svn、cvs一般生成revision#5，revision#6类似的递增数值作为唯一版本号是不可取的，但是我们也同样需要一个唯一的标识来辨别每一次提交，而Git的做法是使用了”commit hashes”。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Subversion：当你使用的是SVN，假设你要提交代码，以下是你的提交过程：


  * 首先设备必须是联网的，可以与远端中央仓库建立连接；


  * 将提交的内容立即传输到远端中央仓库；


  * 远端中央仓库生成递增的版本号，并赋予本地分支。
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;协同工作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Git：若你使用的是Git，你需要决定何时将你的本地仓库的内容同步上传到远端仓库分享出来，而Git不会为你作任何的自动上传的操作；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样子的分享过程相对于其他的中央仓库式的vcs系统来说是更加安全的，所发生的冲突也只会发生于你的本地（仓库）而非远端服务器的仓库，这将更能帮助你规避打乱teammates工作内容冲突的风险。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Subversion：当你将本地分支内容作commit操作之时，你的内容便会分享到远端中央仓库中，其他teammates也都能同步到你所提交的内容。
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;h4&gt;四、集成工具简介&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SourceTree：开源的Git源代码管理工具&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TortoiseGit：开源的Git源代码管理工具&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EGit：Eclipse插件，最新Mars版本已经自带&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gitflow Nightly：Eclipse插件，支持Git-Flow&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;五、常用Git基础知识&lt;/h4&gt;

&lt;blockquote&gt;认识Git的几个关键目录&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage-2-dc673158.png"&gt;&lt;img alt="Draggedimage-2" width="500" height="222" src="/images/2015-11-16-work-in-git/DraggedImage-2-dc673158.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Working directory：工作区&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Index directory：暂存区&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local repository：本地仓库&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remote repository：远端仓库&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;常用的Git操作&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/134623_LGJb_1469576-da57d6c4.png"&gt;&lt;img alt="134623_lgjb_1469576" width="481" height="455" src="/images/2015-11-16-work-in-git/134623_LGJb_1469576-da57d6c4.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;clone：克隆项目到本地工作区，类似svn checkout&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;checkout：创建/切换本地仓库的指定分支到工作区中&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;commit：将本地工作区代码提交到本地仓库&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;push：将本地仓库代码同步到远端仓库&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pull / fetch：将远端仓库的代码同步到本地仓库/工作区&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* pull：fetch + merge，该操作会影响工作区


* fetch：从远端仓库获取并更新到本地仓库中，不影响工作区
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;merge / rebase：从指定分支(&lt;em&gt;PS:分支名称常跟在命令之后&lt;/em&gt;)中获取更新并合并到当前分支&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* merge：


* rebase：
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;stash：备份/唤出当前的现场状态（包含工作区和暂存区）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* git stash [save -a “msg”] 备份当前的现场状态


* git stash list 显示已保存的现场状态列表


* git stash pop/apply [--index][&amp;lt;stash&amp;gt;] 恢复工作状态，若不含带参数，则从状态栈中获取最新的。pop在获取完成后，从栈中移除该状态，apply则不会从栈中移除


* git stash clear 清空状态栈中的所有内容


* git drop 删除状态栈中的指定状态
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;六、可供参考的高阶应用方案&lt;/h4&gt;

&lt;blockquote&gt;什么是Git-SVN的扩展开发模式，即本地开发应用Git的强大分支特性，当最终push操作的时候，目标仓库设定为SVN远端仓库。
这里点到为止，只提及一下，以便有既想使用Git又纠结无法脱离Subversion的开发者去使用，这确实是一种很赞的“曲线救国”方案。

什么是Git Stash的开发模式，即一个工程师可以并行开发多项内容，要求用到切换分支的操作，而在没有提交到本地仓库之前，可以使用git stash命令将当前分支的工作区和暂存区的状态镜像下来。当回过头来需要继续开发的时候，使用git stash pop将指定的状态唤出后，可以继续未完成的内容。&lt;/blockquote&gt;

&lt;h4&gt;七、Git-Flow介绍&lt;/h4&gt;

&lt;blockquote&gt;一图胜过千言万语&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage-3-5c5fccfc.png"&gt;&lt;img alt="Draggedimage-3" width="1060" height="1368" src="/images/2015-11-16-work-in-git/DraggedImage-3-5c5fccfc.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;关键几个分支的概念全解&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主分支&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;branch：保存当前开发成果的分支&lt;/li&gt;
&lt;li&gt;master：保存当前可供生产部署的代码，在每次发布之时推荐为每次新增发布的代码都打上一个TAG，供后续代码维护使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;辅助分支&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feature：开发完整功能、新特性，从develop分支发起的分支&lt;/li&gt;
&lt;li&gt;Release：用于发布新的产品版本而设计的，支持从develop分支派生&lt;/li&gt;
&lt;li&gt;Hotfix：属于计划外创建的可供生产部署的代码分支，普遍场景是软件遇到了异常情况或发生了严重必须要立即修复的缺陷之时。支持从master分支（或者其中的某一个TAG版本）中派生出来&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分支命名惯例&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feature分支：feature-*&lt;/li&gt;
&lt;li&gt;Release分支：release-*&lt;/li&gt;
&lt;li&gt;Hotfix分支：hotfix-*&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;八、GitHub Flow&lt;/h4&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage-4-d270a8bc.png"&gt;&lt;img alt="Draggedimage-4" width="626" height="674" src="/images/2015-11-16-work-in-git/DraggedImage-4-d270a8bc.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;九、Mike Flow (Base on 《Git in Practice》)&lt;/h4&gt;

&lt;blockquote&gt;Single Pattern&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage-5-2fbb2834.png"&gt;&lt;img alt="Draggedimage-5" width="700" height="666" src="/images/2015-11-16-work-in-git/DraggedImage-5-2fbb2834.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;Multiple Pattern&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/DraggedImage-6-c185f536.png"&gt;&lt;img alt="Draggedimage-6" width="690" height="824" src="/images/2015-11-16-work-in-git/DraggedImage-6-c185f536.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;十、Jerome Flow (I call it this name^_^)&lt;/h4&gt;

&lt;p&gt;&lt;a href="/images/2015-11-16-work-in-git/jerome-git-flow1-313bde43.jpg"&gt;&lt;img alt="Jerome-git-flow1" width="1038" height="1600" src="/images/2015-11-16-work-in-git/jerome-git-flow1-313bde43.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;em&gt;参考资料&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model - Vincent Driessen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.ituring.com.cn/article/56870"&gt;基于git的源代码管理模型-Git-Flow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://boxysystems.com/index.php/5-fundamental-differences-between-git-svn/"&gt;5 Fundamental differences between GIT &amp;amp; SVN&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase"&gt;What&amp;rsquo;s the difference between &amp;lsquo;git merge&amp;rsquo; and &amp;#39;git rebase&amp;rsquo;?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://blog.jobbole.com/84664/"&gt;Git的merge和rebase &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://blog.csdn.net/rryqsh/article/details/8230560"&gt;Git中分支merge和rebase的适用场景及区别&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.infoq.com/cn/git-adventures"&gt;InfoQ - Git历险记&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.oschina.net/translate/10-tips-git-next-level?cmp"&gt;10 Tips to Push Your Git Skills to the Next Level&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://book.douban.com/subject/26107548/"&gt;《Git in Practice》-Manning Press - Mike McQuaid&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.infoq.com/articles/interview-Mike-McQuaid-git-practice"&gt;Interview with Mike McQuaid about Git in Practice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.oschina.net/translate/git-conventions?cmp"&gt;GIT Conventions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.oschina.net/question/565065_68194"&gt;git使用简介&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"&gt;Git-Branching-Basic-Branching-and-Merging&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.git-scm.com/book/en/v2/Git-Branching-Rebasing"&gt;Git-Branching-Rebasing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.git-tower.com/learn/git/ebook/mac/appendix/from-subversion-to-git"&gt;Switching from Subversion to Git&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
