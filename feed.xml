<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Jerome Chan</title>
		<link>http://aboutcoder.com</link>
		<atom:link href="http://aboutcoder.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Programming Principles(编程准则)</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;本文已开源发布在这里&lt;a href=&quot;https://github.com/jeromechan/programming-principles-cn&quot;&gt;“Programming Priciples-中文版”&lt;/a&gt;&lt;br /&gt;
如果觉得还不错，可以在&lt;a href=&quot;https://github.com/jeromechan/programming-principles-cn&quot;&gt;GitHub&lt;/a&gt;给本文章标星☆鼓励&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every programmer benefits from understanding programming principles and patterns. This overview is a reference for myself, and I’ve just put it here. Maybe it is of help to you during design, discussion, or review. Please note that it’s far from complete, and that you often need to make trade-offs between conflicting principles.&lt;/p&gt;

&lt;p&gt;每一位开发者都可以从编程准则和模式的学习上获益。这一篇概览性质的参考资料是为自己总结的，现在把它分享在这里。或许它可以在设计、探讨、评审的过程中给予你帮助。不过也请您知晓，它距离完整还差很多，所以在平时使用的过程中，你需要自己去分辨这些编程准则之间的冲突与不同，以便更好地应用于实践当中。&lt;/p&gt;

&lt;p&gt;The list was inspired by &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=331531&quot;&gt;The Principles of Good Programming&lt;/a&gt;. I felt that the list closely, but not completely matches what I would personally put into something similar. Additionally, I wanted a bit more reasoning, details, and links to further resources. &lt;a href=&quot;https://github.com/webpro/programming-principles/issues&quot;&gt;Let me know&lt;/a&gt; if you have any feedback or suggestions for improvement.&lt;/p&gt;

&lt;p&gt;这份列表的灵感来源于这篇文章&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=331531&quot;&gt;The Principles of Good Programming&lt;/a&gt;。我感觉到这篇文章描述的内容与本篇非常地相似，但是和我想要阐述的却是相近而不相同。所以额外的，我希望在这些准则的阐述过程中，包含更多的关于应用原因、细节的描述以及深入解读的资料超链接。如果你有建议或者有问题需要反馈，可以提issues给我&lt;a href=&quot;https://github.com/webpro/programming-principles/issues&quot;&gt;Let me know&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;generic&quot;&gt;Generic&lt;/h3&gt;

&lt;h3 id=&quot;section&quot;&gt;通用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#kiss&quot;&gt;KISS (Keep It Simple Stupid)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#KISS准则&quot;&gt;KISS准则 (保持简单和傻瓜式)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#yagni&quot;&gt;YAGNI (You aren’t gonna need it)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#YAGNI准则&quot;&gt;YAGNI准则 (直到你使用之前都不要实现它)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#do-the-simplest-thing-that-could-possibly-work&quot;&gt;Do The Simplest Thing That Could Possibly Work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#做最简单最可能实现的事情&quot;&gt;做最简单最可能实现的事情&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#separation-of-concerns&quot;&gt;Separation of Concerns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#关注点分离&quot;&gt;关注点分离&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#keep-things-dry&quot;&gt;Keep Things DRY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#DRY原则&quot;&gt;DRY原则 (不要重复你所做过的事情)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code-for-the-maintainer&quot;&gt;Code For The Maintainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#编写可维护的代码&quot;&gt;编写可维护的代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#avoid-premature-optimization&quot;&gt;Avoid Premature Optimization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#避免过度过早优化&quot;&gt;避免过度过早优化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#boy-scout-rule&quot;&gt;Boy-Scout Rule&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#美国童子军准则&quot;&gt;美国童子军准则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inter-moduleclass&quot;&gt;Inter-Module/Class&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;内部模块/类&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#minimise-coupling&quot;&gt;Minimise Coupling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#低耦合&quot;&gt;低耦合&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#law-of-demeter&quot;&gt;Law of Demeter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#迪米特法则&quot;&gt;迪米特法则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#composition-over-inheritance&quot;&gt;Composition Over Inheritance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#组合优于继承&quot;&gt;组合优于继承&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#orthogonality&quot;&gt;Orthogonality&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#正交性&quot;&gt;正交性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Robustness Principle&quot;&gt;Robustness Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#健壮性原则&quot;&gt;健壮性原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;moduleclass&quot;&gt;Module/Class&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;模块/类&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#maximise-cohesion&quot;&gt;Maximise Cohesion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#高内聚&quot;&gt;高内聚&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#里氏替换原则&quot;&gt;里氏替换原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#openclosed-principle&quot;&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#开闭原则&quot;&gt;开闭原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#单一职责原则&quot;&gt;单一职责原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hide-implementation-details&quot;&gt;Hide Implementation Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#隐藏实现细节&quot;&gt;隐藏实现细节&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#curlys-law&quot;&gt;Curly’s Law&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#科里定律&quot;&gt;科里定律&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#encapsulate-what-changes&quot;&gt;Encapsulate What Changes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#封装性&quot;&gt;封装性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interface-segregation-principle&quot;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#接口隔离原则&quot;&gt;接口隔离原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#command-query-separation&quot;&gt;Command Query Separation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#命令查询职责分离&quot;&gt;命令查询职责分离&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kiss&quot;&gt;KISS&lt;/h2&gt;

&lt;h2 id=&quot;kiss-1&quot;&gt;KISS准则&lt;/h2&gt;

&lt;p&gt;Most systems work best if they are kept simple rather than made complex.&lt;/p&gt;

&lt;p&gt;如果能够保持系统简单复杂性低，那么大多数的系统都可以运行的很好。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Less code takes less time to write, has less bugs, and is easier to modify.&lt;/li&gt;
  &lt;li&gt;更少的代码可以花费更少的编码时间、更少的bugs、更容易去修改。&lt;/li&gt;
  &lt;li&gt;Simplicity is the ultimate sophistication.&lt;/li&gt;
  &lt;li&gt;简洁的就是最好最复杂的。&lt;/li&gt;
  &lt;li&gt;It seems that perfection is reached not when there is nothing left to add, but when there is nothing left to take away.&lt;/li&gt;
  &lt;li&gt;完美度不仅表示已经没有什么需要新增，而且也表示着没有什么需要剔除。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://principles-wiki.net/principles:keep_it_simple_stupid&quot;&gt;Keep It Simple Stupid (KISS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;yagni&quot;&gt;YAGNI&lt;/h2&gt;

&lt;h2 id=&quot;yagni-1&quot;&gt;YAGNI准则&lt;/h2&gt;

&lt;p&gt;YAGNI stands for “you aren’t gonna need it”: don’t implement something until it is necessary.&lt;/p&gt;

&lt;p&gt;YAGNI英文描述为 “you aren’t gonna need it”：直到使用之前都不要去实现它。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any work that’s only used for a feature that’s needed tomorrow, means losing effort from features that need to be done for the current iteration.&lt;/li&gt;
  &lt;li&gt;任何只用于明天所需要的功能的工作，意味着从当前所需要的功能中减去相应的工作量。&lt;/li&gt;
  &lt;li&gt;It leads to code bloat; the software becomes larger and more complicated.&lt;/li&gt;
  &lt;li&gt;意味着代码变得臃肿，软件变得更大更复杂。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Always implement things when you actually need them, never when you just foresee that you need them.&lt;/li&gt;
  &lt;li&gt;只有在你真正需要的时候才去实现它，而不是根据你对于未来的估算和预测。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/xp/YouArentGonnaNeedIt.html&quot;&gt;You Arent Gonna Need It&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.xprogramming.com/Practices/PracNotNeed.html&quot;&gt;You’re NOT gonna need it!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/You_ain&#39;t_gonna_need_it&quot;&gt;You ain’t gonna need it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;do-the-simplest-thing-that-could-possibly-work&quot;&gt;Do The Simplest Thing That Could Possibly Work&lt;/h2&gt;

&lt;h2 id=&quot;section-3&quot;&gt;做最简单最可能实现的事情&lt;/h2&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Real progress against the real problem is maximized if we just work on what the problem really is.&lt;/li&gt;
  &lt;li&gt;如果我们努力解决问题的真正原因，那么对真正问题的积极进展就会被最大化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How
怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ask yourself: “What is the simplest thing that could possibly work?”&lt;/li&gt;
  &lt;li&gt;常常询问自己：“最简单最根本的事情是什么？”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html&quot;&gt;Do The Simplest Thing That Could Possibly Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;separation-of-concerns&quot;&gt;Separation of Concerns&lt;/h2&gt;

&lt;h2 id=&quot;section-4&quot;&gt;关注点分离&lt;/h2&gt;

&lt;p&gt;Separation of concerns is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern. For example the business logic of the application is a concern and the user interface is another concern. Changing the user interface should not require changes to business logic and vice versa.&lt;/p&gt;

&lt;p&gt;关注点分离，是将计算机程序分成不同部分的设计原则，使每个部分都涉及到单独的问题。 例如，应用程序的业务逻辑是一个问题，用户界面是另一个问题。 更改用户界面不应要求对业务逻辑进行更改，反之亦然。&lt;/p&gt;

&lt;p&gt;Quoting &lt;a href=&quot;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&quot;&gt;Edsger W. Dijkstra&lt;/a&gt; (1974):&lt;/p&gt;

&lt;p&gt;引证 &lt;a href=&quot;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&quot;&gt;Edsger W. Dijkstra&lt;/a&gt; (1974):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is what I sometimes have called “the separation of concerns”, which, even if not perfectly possible, is yet the only available technique for effective ordering of one’s thoughts, that I know of. This is what I mean by “focusing one’s attention upon some aspect”: it does not mean ignoring the other aspects, it is just doing justice to the fact that from this aspect’s point of view, the other is irrelevant.
通常意义上所谈到的“关注点分离”，或许不是完全可能，我所知道的是它依然更多地依赖于个人对于事情场景的观点和想法。其实我所更想提及的是“把一个人的焦点放在某一个方面”：这并不意味着要忽略其他的方面，只是更多地期望能在关注的方面或者说角度上，找到根本的原因和事实，而不是其它不相关的部分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplify development and maintenance of software applications.&lt;/li&gt;
  &lt;li&gt;简化软件应用的开发和维护工作。&lt;/li&gt;
  &lt;li&gt;When concerns are well-separated, individual sections can be reused, as well as developed and updated independently.&lt;/li&gt;
  &lt;li&gt;当关注点得到很好的分离，单独的部分可以被重用，那么开发和更新工作也将是相互独立的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Break program functionality into separate modules that overlap as little as possible.&lt;/li&gt;
  &lt;li&gt;将程序按照功能拆分为不同的模块，使之具备更低的重复率。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;Separation of Concerns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;keep-things-dry&quot;&gt;Keep things DRY&lt;/h2&gt;

&lt;h2 id=&quot;dry&quot;&gt;DRY原则&lt;/h2&gt;

&lt;p&gt;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&lt;/p&gt;

&lt;p&gt;在一个系统内，每一项知识点的表现必须是单一的，明确无歧义的，具备权威性的。&lt;/p&gt;

&lt;p&gt;Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.&lt;/p&gt;

&lt;p&gt;源代码中的每一项重要的程序功能只应该出现在一个地方。当我们遇到不同的代码段实现了相类似的功能，通常地，我们把不同的部分抽象出来，然后把相同的部分放在公共层，以实现更高的复用性。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Duplication (inadvertent or purposeful duplication) can lead to maintenance nightmares, poor factoring, and logical contradictions.&lt;/li&gt;
  &lt;li&gt;重复代码（有意或无意的重复）会引发维护上的噩梦、较差的因果关系、逻辑矛盾。&lt;/li&gt;
  &lt;li&gt;A modification of any single element of a system does not require a change in other logically unrelated elements.&lt;/li&gt;
  &lt;li&gt;一个系统内单一元素的修改不涉及其他逻辑关联的元素的变更。&lt;/li&gt;
  &lt;li&gt;Additionally, elements that are logically related all change predictably and uniformly, and are thus kept in sync.&lt;/li&gt;
  &lt;li&gt;另，逻辑相关的元素的变化需要具有可预见性和一致性的，即需要保持同步性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put business rules, long expressions, if statements, math formulas, metadata, etc. in only one place.&lt;/li&gt;
  &lt;li&gt;将业务规则、长表达式、条件语句、数学公式、元数据等放置到同一个地方。&lt;/li&gt;
  &lt;li&gt;Identify the single, definitive source of every piece of knowledge used in your system, and then use that source to generate applicable instances of that knowledge (code, documentation, tests, etc).&lt;/li&gt;
  &lt;li&gt;在系统的识别出每个知识点的单一来源，然后将这些知识点并应用于相同场景的实例当中（代码、文档、测试用例等）。&lt;/li&gt;
  &lt;li&gt;Apply the &lt;a href=&quot;http://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;Rule of three&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;遵循规则&lt;a href=&quot;http://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;Rule of three&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?DontRepeatYourself&quot;&gt;Dont Repeat Yourself&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&quot;&gt;Don’t repeat yourself&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://programmer.97things.oreilly.com/wiki/index.php/Don&#39;t_Repeat_Yourself&quot;&gt;Don’t Repeat Yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related&lt;/p&gt;

&lt;p&gt;引用&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Abstraction_principle_(computer_programming)&quot;&gt;Abstraction principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?OnceAndOnlyOnce&quot;&gt;Once And Only Once&lt;/a&gt; is a subset of DRY (also referred to as the goal of refactoring).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Single_Source_of_Truth&quot;&gt;Single Source of Truth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A violation of DRY is &lt;a href=&quot;http://thedailywtf.com/articles/The-WET-Cart&quot;&gt;WET&lt;/a&gt; (Write Everything Twice)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-for-the-maintainer&quot;&gt;Code For The Maintainer&lt;/h2&gt;

&lt;h2 id=&quot;section-5&quot;&gt;编写可维护的代码&lt;/h2&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maintenance is by far the most expensive phase of any project.&lt;/li&gt;
  &lt;li&gt;维护阶段是一个项目生命周期当中最为昂贵的阶段。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Be&lt;/em&gt; the maintainer.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;成为&lt;/em&gt;一个维护者。&lt;/li&gt;
  &lt;li&gt;Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.&lt;/li&gt;
  &lt;li&gt;常常作出假设，假设你的代码维护者是一个有精神暴力倾向的并且知道你住处的人。&lt;/li&gt;
  &lt;li&gt;Always code and comment in such a way that if someone a few notches junior picks up the code, they will take pleasure in reading and learning from it.&lt;/li&gt;
  &lt;li&gt;在编码和注释的时候，时长以阅读者的角度去考虑，考虑他们是否会爱上阅读和学习你的成果。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sensible.com/dmmt.html&quot;&gt;Don’t make me think&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;以常识和简洁的角度去说明事情关键，不要让读者去想太多。&lt;a href=&quot;http://www.sensible.com/dmmt.html&quot;&gt;Don’t make me think&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;Principle of Least Astonishment&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;遵循准则&lt;a href=&quot;http://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;Principle of Least Astonishment&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?CodeForTheMaintainer&quot;&gt;Code For The Maintainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.codinghorror.com/the-noble-art-of-maintenance-programming/&quot;&gt;The Noble Art of Maintenance Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;avoid-premature-optimization&quot;&gt;Avoid Premature Optimization&lt;/h2&gt;

&lt;h2 id=&quot;section-6&quot;&gt;避免过度过早优化&lt;/h2&gt;

&lt;p&gt;Quoting &lt;a href=&quot;http://en.wikiquote.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;引用 &lt;a href=&quot;http://en.wikiquote.org/wiki/Donald_Knuth&quot;&gt;唐纳德·克努斯&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.
程序员花费极大的时间去思考、担心哪些程序里非关键部位的运行速度，而这种种在调试、维护上的工作效能方面常常引发了负面的影响。我们应该摒弃那些花费了97%时间去做的低效能的事情。过早的优化是所有邪恶的根源。不管怎样，我们不能放弃那3%关键部分的机会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understanding what is and isn’t “premature” is critical of course.&lt;/p&gt;

&lt;p&gt;对于是否属于“过早的优化”，这是一项关键的课程。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is unknown upfront where the bottlenecks will be.&lt;/li&gt;
  &lt;li&gt;过早优化会引发未来不可知的瓶颈的发生。&lt;/li&gt;
  &lt;li&gt;After optimization, it might be harder to read and thus maintain.&lt;/li&gt;
  &lt;li&gt;优化之后，它或许变得更加难以阅读和维护。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?MakeItWorkMakeItRightMakeItFast&quot;&gt;Make It Work Make It Right Make It Fast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?MakeItWorkMakeItRightMakeItFast&quot;&gt;使之具备可行性、正确性、快速性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Don’t optimize until you need to, and only after profiling you discover a bottleneck optimise that.&lt;/li&gt;
  &lt;li&gt;只有在你需要的时候才去优化，只有在做了瓶颈分析之后再去做实际的优化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Program_optimization&quot;&gt;Program optimization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot;&gt;Premature Optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;boy-scout-rule&quot;&gt;Boy-Scout Rule&lt;/h2&gt;

&lt;h2 id=&quot;section-7&quot;&gt;美国童子军准则&lt;/h2&gt;

&lt;p&gt;The Boy Scouts of America have a simple rule that we can apply to our profession: “Leave the campground cleaner than you found it”. The boy-scout rule states that we should always leave the code cleaner than we found it.&lt;/p&gt;

&lt;p&gt;美国童子军有一项简单的准则：“离开野营区之时保证要比自己来的时候更加干净”。我们可以将这一准则应用在计算机方面：“时常迫使代码比我们发现它的时候更整洁更清晰”。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When making changes to an existing codebase the code quality tends to degrade, accumulating technical debt. Following the boyscout rule, we should mind the quality with each commit. Technical debt is resisted by continuous refactoring, no matter how small.&lt;/li&gt;
  &lt;li&gt;当我们对现有代码库作修改之时，现有代码库质量低并且积累了许多的技术债务。根据美国童子军准则，我们理应关心每一次提交的代码质量，而技术债务也应该在持续的重构过程中逐渐变少。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With each commit make sure it does not degrade the codebase quality.&lt;/li&gt;
  &lt;li&gt;保证每一次的提交不会造成代码库的代码质量的降级。&lt;/li&gt;
  &lt;li&gt;Any time someone sees some code that isn’t as clear as it should be, they should take the opportunity to fix it right there and then.&lt;/li&gt;
  &lt;li&gt;任何时间，任何人，只要发现了代码可以变得更为清晰和整洁，那么他就应该寻找机会去实现它。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/OpportunisticRefactoring.html&quot;&gt;Opportunistic Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;minimise-coupling&quot;&gt;Minimise Coupling&lt;/h2&gt;

&lt;h2 id=&quot;section-8&quot;&gt;低耦合&lt;/h2&gt;

&lt;p&gt;Coupling between modules/components is their degree of mutual interdependence; lower coupling is better. In other words, coupling is the probability that code unit “B” will “break” after an unknown change to code unit “A”.&lt;/p&gt;

&lt;p&gt;耦合度指的是模块/组件之间的相互依赖程度。耦合度越低则越好。换句话说，耦合度高会导致代码单元“B”因为代码单元“A”的一个未知变更而被打断。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A change in one module usually forces a ripple effect of changes in other modules.&lt;/li&gt;
  &lt;li&gt;一个模块的变更会迫使和波及其他的模块也需要发生相应的变更。&lt;/li&gt;
  &lt;li&gt;Assembly of modules might require more effort and/or time due to the increased inter-module dependency.&lt;/li&gt;
  &lt;li&gt;模块集成过程中会涉及更多的修改、更多的时间，正是因为模块内的相互依赖复杂度的升高。&lt;/li&gt;
  &lt;li&gt;A particular module might be harder to reuse and/or test because dependent modules must be included.&lt;/li&gt;
  &lt;li&gt;一个指定的模块将变得难以重用和测试，正是因为其依赖的其他模块也必须被包含进来。&lt;/li&gt;
  &lt;li&gt;Developers might be afraid to change code because they aren’t sure what might be affected.&lt;/li&gt;
  &lt;li&gt;开发者会害怕修改代码，因为他们不确定具体有多少方面会被涉及。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eliminate, minimise, and reduce complexity of necessary relationships.&lt;/li&gt;
  &lt;li&gt;尽可能多地，甚至消除复杂必须的关联关系。&lt;/li&gt;
  &lt;li&gt;By hiding implementation details, coupling is reduced.&lt;/li&gt;
  &lt;li&gt;隐藏了实现的细节之后，耦合性往往会被降低。&lt;/li&gt;
  &lt;li&gt;Apply the &lt;a href=&quot;#law-of-demeter&quot;&gt;Law of Demeter&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;遵循迪米特法则&lt;a href=&quot;#law-of-demeter&quot;&gt;Law of Demeter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Coupling_(computer_programming)&quot;&gt;Coupling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?CouplingAndCohesion&quot;&gt;Coupling And Cohesion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;law-of-demeter&quot;&gt;Law of Demeter&lt;/h2&gt;

&lt;h2 id=&quot;section-9&quot;&gt;迪米特法则&lt;/h2&gt;

&lt;p&gt;Don’t talk to strangers.&lt;/p&gt;

&lt;p&gt;不要告诉陌生人。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It usually tightens coupling&lt;/li&gt;
  &lt;li&gt;依赖往往会增加耦合度。&lt;/li&gt;
  &lt;li&gt;It might reveal too much implementation details&lt;/li&gt;
  &lt;li&gt;依赖会露出过多的实现细节。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;p&gt;A method of an object may only call methods of:&lt;/p&gt;

&lt;p&gt;一个对象的一个方法，只能调用如下内容：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The object itself.&lt;/li&gt;
  &lt;li&gt;对象本身。&lt;/li&gt;
  &lt;li&gt;An argument of the method.&lt;/li&gt;
  &lt;li&gt;方法参数。&lt;/li&gt;
  &lt;li&gt;Any object created within the method.&lt;/li&gt;
  &lt;li&gt;方法内所创建的对象。&lt;/li&gt;
  &lt;li&gt;Any direct properties/fields of the object.&lt;/li&gt;
  &lt;li&gt;对象内直接包含的属性、字段。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/&quot;&gt;The Law of Demeter Is Not A Dot Counting Exercise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;composition-over-inheritance&quot;&gt;Composition Over Inheritance&lt;/h2&gt;

&lt;h2 id=&quot;section-10&quot;&gt;组合优于继承&lt;/h2&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Less coupling between classes.&lt;/li&gt;
  &lt;li&gt;降低类之间的耦合。&lt;/li&gt;
  &lt;li&gt;Using inheritance, subclasses easily make assumptions, and break LSP.&lt;/li&gt;
  &lt;li&gt;使用继承、子类会易于出现断言，并且打破里氏替换原则。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test for LSP (substitutability) to decide when to inherit.&lt;/li&gt;
  &lt;li&gt;根据里氏替换原则，判断什么时候使用继承。&lt;/li&gt;
  &lt;li&gt;Compose when there is a “has a” (or “uses a”) relationship, inherit when “is a”.&lt;/li&gt;
  &lt;li&gt;若是”has a” (或者”uses a”)关系的时候使用组合，若是”is a”关系则使用继承。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/thalesc/archive/2012/09/05/favor-composition-over-inheritance.aspx&quot;&gt;Favor Composition Over Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;orthogonality&quot;&gt;Orthogonality&lt;/h2&gt;

&lt;h2 id=&quot;section-11&quot;&gt;正交性&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The basic idea of orthogonality is that things that are not related conceptually should not be related in the system.
正交性的基本定义是，系统内概念不相同的部分，不应该形成关联和依赖。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&quot;http://www.artima.com/intv/dry3.html&quot;&gt;Be Orthogonal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引用: &lt;a href=&quot;http://www.artima.com/intv/dry3.html&quot;&gt;Be Orthogonal&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is associated with simplicity; the more orthogonal the design, the fewer exceptions. This makes it easier to learn, read and write programs in a programming language. The meaning of an orthogonal feature is independent of context; the key parameters are symmetry and consistency.
它与简单性有关，设计的时候正交性越高，则异常发生地越少。这通常会使得代码变得更加容易学习、阅读和编写，无论你使用的是哪一种编程语言。正交性的一个典型特征是上下文之间互相没有依赖，核心参数之间会保持对称性和一致性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&quot;http://en.wikipedia.org/wiki/Orthogonality_(programming)&quot;&gt;Orthogonality&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引用: &lt;a href=&quot;http://en.wikipedia.org/wiki/Orthogonality_(programming)&quot;&gt;Orthogonality&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;robustness-principle&quot;&gt;Robustness Principle&lt;/h2&gt;

&lt;h2 id=&quot;section-12&quot;&gt;健壮性原则&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Be conservative in what you do, be liberal in what you accept from others
对内保持保守，对外保持自由。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Collaborating services depend on each others interfaces. Often the interfaces need to evolve causing the other end to receive unspecified data. A naive implementation refuses to collaborate if the received data does not strictly follow the specification. A more sophisticated implementation will still work ignoring the data it does not recognize.&lt;/p&gt;

&lt;p&gt;协作服务依赖于各式各样的接口。通常地，接口的演变会致使另外一端接收到未指定的数据。倘若数据结构没有遵循规范，那么一个简单的不健壮的实现会遭到拒绝。一个健壮的实现会主动忽略不可识别的数据，继而持续工作。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In order to be able to evolve services you need to ensure that a provider can make changes to support new demands while causing minimal breakage to their existing clients.&lt;/li&gt;
  &lt;li&gt;为了使得程序服务得以演进，你需要确保提供者程序可以支持新的指令，尽管这些指令可能会对现有的客户端所导致的小面积破坏。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code that sends commands or data to other machines (or to other programs on the same machine) should conform completely to the specifications, but code that receives input should accept non-conformant input as long as the meaning is clear.&lt;/li&gt;
  &lt;li&gt;发送给其他机器（或者相同机器的其他程序）的指令或者数据的代码理应完全遵循指定的规范，但是接收方需要能够接收和处理不符合规范，但含义清晰的数据或指令。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Robustness_principle&quot;&gt;Robustness Principle in Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/TolerantReader.html&quot;&gt;Tolerant Reader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;maximise-cohesion&quot;&gt;Maximise Cohesion&lt;/h2&gt;

&lt;h2 id=&quot;section-13&quot;&gt;高内聚&lt;/h2&gt;

&lt;p&gt;Cohesion of a single module/component is the degree to which its responsibilities form a meaningful unit; higher cohesion is better.&lt;/p&gt;

&lt;p&gt;一个单一模块/组件的内聚性指的是它的职责形成了有具体含义的独立单元。内聚性自然越高也好。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Increased difficulty in understanding modules.&lt;/li&gt;
  &lt;li&gt;增加了模块理解的难度。&lt;/li&gt;
  &lt;li&gt;Increased difficulty in maintaining a system, because logical changes in the domain affect multiple modules, and because changes in one module require changes in related modules.&lt;/li&gt;
  &lt;li&gt;增加了维护系统的成本消耗。因为一个方面的逻辑变更会引发其它多个关联模块需要同时发生变更。&lt;/li&gt;
  &lt;li&gt;Increased difficulty in reusing a module because most applications won’t need the random set of operations provided by a module.&lt;/li&gt;
  &lt;li&gt;增加了程序重用的难度。因为大多数的程序不需要模块所提供的随机操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Group related functionalities sharing a single responsibility (e.g. in a class).&lt;/li&gt;
  &lt;li&gt;一组相似的功能共享使用一个单一的职责（例如在一个类里）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_(computer_science)&quot;&gt;Cohesion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?CouplingAndCohesion&quot;&gt;Coupling And Cohesion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h2&gt;

&lt;h2 id=&quot;section-14&quot;&gt;里氏替换原则&lt;/h2&gt;

&lt;p&gt;The LSP is all about expected behavior of objects:&lt;/p&gt;

&lt;p&gt;里氏替换原则是关于对象预期行为方面的描述：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.
程序内的对象理应可以被它的子类所无缝替换，此间不需要作任何的程序订正操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov substitution principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://freshbrewedcode.com/derekgreer/2011/12/31/solid-javascript-the-liskov-substitution-principle/&quot;&gt;The Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openclosed-principle&quot;&gt;Open/Closed Principle&lt;/h2&gt;

&lt;h2 id=&quot;section-15&quot;&gt;开闭原则&lt;/h2&gt;

&lt;p&gt;Software entities (e.g. classes) should be open for extension, but closed for modification. I.e. such an entity can allow its behavior to be modified without altering its source code.&lt;/p&gt;

&lt;p&gt;软件实体（例如类）理应对扩展开放，对修改关闭。例如一个实体可以允许它的动作不需要经过修改源码而发生的演变。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve maintainability and stability by minimizing changes to existing code.&lt;/li&gt;
  &lt;li&gt;在现有代码发生最小化改变的前提下，改善和提高可维护性和稳定性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write classes that can be extended (as opposed to classes that can be modified).&lt;/li&gt;
  &lt;li&gt;编写可以被扩展的类（而不是类文件被修改）。&lt;/li&gt;
  &lt;li&gt;Expose only the moving parts that need to change, hide everything else.&lt;/li&gt;
  &lt;li&gt;只暴露那些需要修改以支持扩展的部分，其余的部分都隐藏。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;Open Closed Principle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://freshbrewedcode.com/derekgreer/2011/12/19/solid-javascript-the-openclosed-principle/&quot;&gt;SOLID JavaScript: The Open/Closed Principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;/h2&gt;

&lt;h2 id=&quot;section-16&quot;&gt;单一职责原则&lt;/h2&gt;

&lt;p&gt;A class should never have more than one reason to change.&lt;/p&gt;

&lt;p&gt;一个类不应该包含多于一个职责。&lt;/p&gt;

&lt;p&gt;Long version: Every class should have a single responsibility, and that responsibility should be entirely encapsulated by the class. Responsibility can be defined as a reason to change, so a class or module should have one, and only one, reason to change.&lt;/p&gt;

&lt;p&gt;长文字版本：每一个类都应该有一个职责，而这个职责应该被这个类所内聚。职责被定义为发生改变的一个原因，即一个类或者模块有且仅有一个原因会致使其发生演变。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maintainability: changes should be necessary only in one module or class.&lt;/li&gt;
  &lt;li&gt;可维护性：变更只应该出现在一个模块或者一个类当中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apply &lt;a href=&quot;#Curly-s-Law&quot;&gt;Curly’s Law&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;遵循&lt;a href=&quot;#科里定律&quot;&gt;科里定律&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single responsibility principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hide-implementation-details&quot;&gt;Hide Implementation Details&lt;/h2&gt;

&lt;h2 id=&quot;section-17&quot;&gt;隐藏实现细节&lt;/h2&gt;

&lt;p&gt;A software module hides information (i.e. implementation details) by providing an interface, and not leak any unnecessary information.&lt;/p&gt;

&lt;p&gt;一个软件模块应该隐藏一些信息（例如实现细节），仅提供一个接口即可，以确保不泄露任何不必要的信息。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the implementation changes, the interface clients are using does not have to change.&lt;/li&gt;
  &lt;li&gt;当实现细节需要发生变更之时，接口消费方可以无缝使用而不需要作出任何变更。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimize accessibility of classes and members.&lt;/li&gt;
  &lt;li&gt;最小化类及其成员的可访问性。&lt;/li&gt;
  &lt;li&gt;Don’t expose member data in public.&lt;/li&gt;
  &lt;li&gt;不要暴露成员数据在public域。&lt;/li&gt;
  &lt;li&gt;Avoid putting private implementation details into a class’s interface.&lt;/li&gt;
  &lt;li&gt;杜绝将私有的实现细节放置到类的接口层上。&lt;/li&gt;
  &lt;li&gt;Decrease coupling to hide more implementation details.&lt;/li&gt;
  &lt;li&gt;降低模块间耦合性，隐藏更多的不必要的实现细节。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Information_hiding&quot;&gt;Information hiding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;curlys-law&quot;&gt;Curly’s Law&lt;/h2&gt;

&lt;h2 id=&quot;section-18&quot;&gt;科里定律&lt;/h2&gt;

&lt;p&gt;Curly’s Law is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing.&lt;/p&gt;

&lt;p&gt;科里定律是关于如何为任一特定代码段选择一项单一的、定义明确的目标的一项法则：只作一件事。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.codinghorror.com/curlys-law-do-one-thing/&quot;&gt;Curly’s Law: Do One Thing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fortyplustwo.com/2008/09/06/the-rule-of-one-or-curlys-law/&quot;&gt;The Rule of One or Curly’s Law&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;encapsulate-what-changes&quot;&gt;Encapsulate What Changes&lt;/h2&gt;

&lt;h2 id=&quot;section-19&quot;&gt;封装性&lt;/h2&gt;

&lt;p&gt;A good design identifies the hotspots that are most likely to change and encapsulates them behind an API. When an anticipated change then occurs, the modifications are kept local.&lt;/p&gt;

&lt;p&gt;一项好的设计意味着某些很有可能被修改和内聚的热点部分被隐藏在API的后方。当预期的变更出现时，这些变更也只需要在内部作出调整即可。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To minimize required modifications when a change occurs&lt;/li&gt;
  &lt;li&gt;当变更发生时，可以最小化变更的涉及面。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulate the concept that varies behind an API&lt;/li&gt;
  &lt;li&gt;在API内部封装多样化的概念。&lt;/li&gt;
  &lt;li&gt;Possibly separate the varying concept into its own module&lt;/li&gt;
  &lt;li&gt;尽可能地从多样化的概念中，分隔出独立的单一模块。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://principles-wiki.net/principles:encapsulate_the_concept_that_varies&quot;&gt;Encapsulate the Concept that Varies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/steverowe/archive/2007/12/26/encapsulate-what-varies.aspx&quot;&gt;Encapsulate What Varies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot;&gt;Information Hiding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interface-segregation-principle&quot;&gt;Interface Segregation Principle&lt;/h2&gt;

&lt;h2 id=&quot;section-20&quot;&gt;接口隔离原则&lt;/h2&gt;

&lt;p&gt;Reduce fat interfaces into multiple smaller and more specific client specific interfaces. An interface should be more dependent on the code that calls it than the code that implements it.&lt;/p&gt;

&lt;p&gt;降低接口的粒度，使得接口更小更具体，更接近调用方的现实需要。一个接口的定义更多地应该依赖于调用方的代码，而不是实现方可以实现的细节。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If a class implements methods that are not needed the caller needs to know about the method implementation of that class. For example if a class implements a method but simply throws then the caller will need to know that this method shouldn’t actually be called.&lt;/li&gt;
  &lt;li&gt;如果一个类的实现方法已经被废弃，那么调用方理应需要知晓这个类的实现方法的具体实现细节。例如，假设一个类的实现方法仅仅是抛出了一个异常，那么调用方需要知道这个方法不应该再被调用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid fat interfaces. Classes should never have to implement methods that violate the &lt;a href=&quot;#single-responsibility-principle&quot;&gt;Single responsibility principle&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;杜绝肥胖的接口存在。一个类的实现方法的设计不应该违背&lt;a href=&quot;#single-responsibility-principle&quot;&gt;单一职责原则&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot;&gt;Interface segregation principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;command-query-separation&quot;&gt;Command Query Separation&lt;/h2&gt;

&lt;h2 id=&quot;command-query-responsibility-segregationcqrs&quot;&gt;命令查询职责分离（也称Command Query Responsibility Segregation，CQRS）&lt;/h2&gt;

&lt;p&gt;The Command Query Separation principle states that each method should be either a command that performs an action or a query that returns data to the caller but not both. Asking a question should not modify the answer.&lt;/p&gt;

&lt;p&gt;命令查询职责分离准则的具体阐述可以参见资料所引述到的Martin Fowler的文章。命令查询职责分离原则指出，每个方法应该是执行一个操作的命令（命令是void的，不返回任何结果，但会改变对象的状态）或者一个查询（返回结果，但是不会改变对象的状态，对系统没有副作用），它将数据返回给调用者，而不是两者。提出问题不应该修改答案。&lt;/p&gt;

&lt;p&gt;With this principle applied the programmer can code with much more confidence. The query methods can be used anywhere and in any order since they do not mutate the state. With commands one has to be more careful.&lt;/p&gt;

&lt;p&gt;使用这条准则，程序员在编码之时可以更加自信，查询方法可以在任何地方以任意次序使用，因为它不会影响到对象状态。而命令则需要更加小心谨慎。&lt;/p&gt;

&lt;p&gt;Why&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By clearly separating methods into queries and commands the programmer can code with additional confidence without knowing each method’s implementation details.&lt;/li&gt;
  &lt;li&gt;基于清晰地将方法分隔为查询和命令两大阵营之后，程序员在编码方面更加自信了，因为他们可以不需要去了解每个方法的实现具体细节。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How&lt;/p&gt;

&lt;p&gt;怎么办？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implement each method as either a query or a command&lt;/li&gt;
  &lt;li&gt;方法设计之时，要么是查询，要么是命令，不可二者兼备。&lt;/li&gt;
  &lt;li&gt;Apply naming convention to method names that implies whether the method is a query or a command&lt;/li&gt;
  &lt;li&gt;针对方法名的命名上作约定和规范，使得方法名上可以直接表露出它具体是查询还是命令。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;p&gt;更多资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command%E2%80%93query_separation&quot;&gt;Command Query Separation in Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/CommandQuerySeparation.html&quot;&gt;Command Query Separation by Martin Fowler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yangecnu/p/Introduction-CQRS.html&quot;&gt;Introduction CQRS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 16 May 2017 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2017/05/16/programming-principles/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2017/05/16/programming-principles/</guid>
			</item>
		
			<item>
				<title>并发场景实践方案优劣评析</title>
				<description>&lt;p&gt;近期实践了高并发场景下，如何去实现抢购系统的研究。虽然方案并不算成功，但是本次能将以往只在资料中学习过的知识付诸于现实，也让自己畅快淋漓了一番。本篇文章所阐述的内容都比较基础，重在于将实践过程中所得到的经验和教训分享出来给大家。&lt;/p&gt;

&lt;p&gt;以下将分为五个方面来回顾下本次高并发的实践经历。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.抢购场景特点&lt;/li&gt;
  &lt;li&gt;2.技术选型&lt;/li&gt;
  &lt;li&gt;3.方案思路&lt;/li&gt;
  &lt;li&gt;4.优劣势辨析&lt;/li&gt;
  &lt;li&gt;5.小结一下&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;一、抢购场景的特点&lt;/h4&gt;

&lt;p&gt;在日常生活中，电子商务营销手段中，抢购、促销是最为常用的提高销售的手段。最熟悉不过的当然就是天猫“双十一”购物节了。既然是“抢购”，用通俗的话来概括，那就是&lt;strong&gt;手快有手慢无&lt;/strong&gt;。以下我们做了一些细分：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.1 限时限量&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;限用户样本&lt;/li&gt;
  &lt;li&gt;限用户可购买量&lt;/li&gt;
  &lt;li&gt;限商品总量&lt;/li&gt;
  &lt;li&gt;限抢购时间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.2 防伪防恶意&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;防虚假用户购买&lt;/li&gt;
  &lt;li&gt;防恶意系统攻击&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而广大群众并不一定都跟着你的步伐走，可能他们会跟抢12306火车票的手段一样，在你的抢购活动中付诸于实践，往往这个会给系统带来四面楚歌般的无形压力，轻者响应延迟，重者宕机。&lt;/p&gt;

&lt;p&gt;写到这里，复杂度已经可见一斑，内容涉及了各个方面，例如并发编程、安全、缓存、关系型数据存储、网络流量、防火墙、服务容器、连接池、IO通信。虽说内容很多，但是我们可以从中根据自己所面临的场景，选择其中一些合适的技术手段即可，不必面面俱到追求完美，它们都只是你实现目标的工具。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;二、技术选型&lt;/h4&gt;

&lt;p&gt;了解基本的抢购场景知识之后，就是考虑怎么去解决场景中所遇到的实际问题了。对于抢购场景的特点，我们给每个特点归归类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;限用户样本、限抢购时间，这2项可以算是参加抢购的前置条件，不满足则拒绝请求。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于用户样本的限定，普通的条件性编码可以满足这项需要，因为这项属于前置条件，条件数据的属性当确定活动用户样本之后，它们就成为了静态数据，没有并发的意外风险。&lt;br /&gt;
对于抢购时间，这项条件可以借鉴业界对这方面的设计思路，将静态代码（html等静态页面内容）部署到CDN节点上，而仅保留一项js文件（该文件中包含了判断抢购开始的请求编码，当然里面可以包含一项随机token来保障代码所发出的请求的有效性）执行动态加载，以保障抢购可以准时开始。 &lt;br /&gt;
对于抢购页面CDN静态之后所出现的无效点击、提前知道抢购页面等问题，这部分可以使用包含随机token串的页面url，用以保证抢购页面的有效性和请求的合法性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;限用户可购买量、限商品总量，这2项是整个抢购场景中的核心前提，即“不可超售”的业务特点。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于用户可购买量、商品总量的限制，这部分可以考虑使用编程锁的实现，如果考虑到多机部署的分布式需要，可以考虑使用分布式锁，同时加以“分而治之”的思路，可以提高请求的并发量。 &lt;br /&gt;
关于锁的知识，我们常见的锁有悲观锁和乐观锁，而锁的实现方式可以是中间件、缓存、JDK自带同步锁、关系型数据库等方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;防虚假用户购买，这一特点旨在于系统如何去辨析真正的消费用户，而非临时创建的僵尸用户。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这部分比较难以实现，并不是简单的判别某个单位时间同一来源请求上限值、验证码校验这么一些常见的指标。如果要根本性解决这方面，可能需要使用一些机器学习方面的知识，分析出那类请求可以判别为“疑似攻击”，同时还需要准确率，这是一门深奥的学问，目前自己还没有太多的涉及就不深入谈论了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;防恶意系统攻击，这项属于系统部署层面上需要考量的架构问题。如若不能及时识别出这是一次攻击而非正常消费请求，那么系统会面临宕机的风险。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于恶意系统攻击，与前面谈及的“防虚假用户购买”有相同之处，“虚假用户购买”的量达到了一定的阈值，那么就可以归类为“恶意系统攻击”了。在WEB安全领域上，有许多常见的网络攻击都是需要去规避和解决的，无论是编码上还是运维部署层面上，例如DDoS、SQL注入、信息伪造等手段。&lt;/p&gt;

&lt;p&gt;本次实践过程中，对于这一块并没有太多的涉及，只是通过一些流量设置上的控制，避免了服务容器由于请求压力过高而产生的宕机风险。这一块待日后自己的知识库成熟之后，再po文分享下自己的实践感触。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;三、方案思路&lt;/h4&gt;

&lt;h5 id=&quot;section-3&quot;&gt;3.1 基本思路和考量点&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;不可超售，需要使用到线程安全、线程锁、本地线程、事务性、原子CAS特性、阻塞/非阻塞队列等知识；&lt;/li&gt;
  &lt;li&gt;分而治之，将商品可销售总量分为多条管道同时进行销售，由负载均衡算法代理路由的逻辑；&lt;/li&gt;
  &lt;li&gt;存储介质上，考量可持久化缓存、关系型数据库；&lt;/li&gt;
  &lt;li&gt;在组件的配置方面，考量服务容器的并行连接池配置、缓存的连接池配置、关系型数据库连接池配置、编码线程池配置、JVM启动参数（例如JVM PermSize、Xms、Xmx内存项配置）；&lt;/li&gt;
  &lt;li&gt;在流程实现上，将一些有效判断节点分布在真实消费商品的逻辑之前，提高核心逻辑的有效执行占比，提高访问效率；&lt;/li&gt;
  &lt;li&gt;在消费数据的持久化措施上，采用“生产者-消费者”的队列实现模式，异步的策略将消费数据尽可能快地持久化到日常使用的关系型数据库中，便于查看和其他业务系统的接口读取；&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-4&quot;&gt;3.2 逻辑流程图&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-19-parallel-of-buying-scenario/14821328103721.jpg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-5&quot;&gt;3.3 实现过程中可能需要额外关注的部分&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redis使用方面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;1.系统Redis的连接池配置，最大可用连接&lt;code class=&quot;highlighter-rouge&quot;&gt;maxTotal&lt;/code&gt;要小于Redis服务配置&lt;code class=&quot;highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;maxclients&lt;/code&gt;数值；&lt;/li&gt;
  &lt;li&gt;2.系统Redis的连接超时时长&lt;code class=&quot;highlighter-rouge&quot;&gt;maxWaitMillis&lt;/code&gt;要尽可能地根据系统可承载压力进行设置，一般不可超过5s，高并发的场景下建议在2s以下；&lt;/li&gt;
  &lt;li&gt;3.为保障系统Redis客户端从池子中获取的连接不是broken的，参数&lt;code class=&quot;highlighter-rouge&quot;&gt;testOnBorrow =&amp;gt; true&lt;/code&gt;一定要加上;&lt;/li&gt;
  &lt;li&gt;4.Jedis连接池的空闲释放算法采用的是apache common pool作的实现，GenericObjectPool是通过“驱逐者线程Evictor”管理“空闲池对象”的。在高并发场景下，选用&lt;code class=&quot;highlighter-rouge&quot;&gt;LIFO&lt;/code&gt;可以更快地通过Evictor驱逐者任务将空闲无占用连接及时释放掉，而避免采用&lt;code class=&quot;highlighter-rouge&quot;&gt;FIFO&lt;/code&gt;致使部分idle连接处在&lt;code class=&quot;highlighter-rouge&quot;&gt;starvation&lt;/code&gt;状态下久久得不到释放，从而造成leaks of redis resources；&lt;/li&gt;
  &lt;li&gt;5.如果你使用的不是Spring框架对Redis客户端进行&lt;code class=&quot;highlighter-rouge&quot;&gt;scope=&quot;singleton&quot;&lt;/code&gt;的集成，那么在创建连接池之时，也需要避免瞬间并发而导致的池子被多建的场景发生，因为每一个池子都会由于配置&lt;code class=&quot;highlighter-rouge&quot;&gt;minIdle&lt;/code&gt;而固定占用着redis的连接数量；&lt;/li&gt;
  &lt;li&gt;6.如果你使用的是分布式集群Redis，那么可以对连接池配置多机，如此可有效提高连接数和Redis服务性能；&lt;/li&gt;
  &lt;li&gt;7.如果你使用的是Spring+Jedis（注：最受欢迎的Redis Client之一）的Redis编码方案，请留意&lt;code class=&quot;highlighter-rouge&quot;&gt;ShardedJedisPool&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;JedisPool&lt;/code&gt;的区别，后者所取得的连接可以执行事务、多key批量等操作，而前者是为Redis分布式集群而生，每一次所获取的连接并不保证相同和唯一来源；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里给出一个简单的Spring+Jedis的连接池配置例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jedis连接池基础参数配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jedisConfig&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis.clients.jedis.JedisPoolConfig&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maxTotal&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maxIdle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;minIdle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testOnBorrow&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TestOnReturn&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maxWaitMillis&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testWhileIdle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timeBetweenEvictionRunsMillis&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20000&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;minEvictableIdleTimeMillis&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lifo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ShardedJedisPool连接池&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shardedJedisPool&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis.clients.jedis.ShardedJedisPool&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleton&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jedisConfig&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis.clients.jedis.JedisShardInfo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6379&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/constructor-arg&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JedisPool连接池&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jedisPool&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redis.clients.jedis.JedisPool&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleton&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jedisConfig&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6379&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;服务容器的运行保障方面（本次所使用到的是Tomcat）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了降低服务容器因为过载而造成的请求堵塞、容器停滞、宕机等风险，针对Tomcat的连接数方面做了些配置上的调整，以确保可控可监听：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tomcat Executor连接线程池&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Executor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tomcatThreadPool&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;线程池名称&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;namePrefix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;catalina-exec-&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;线程名称前缀&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;maxThreads=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3000&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;最大连接线程数&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;minSpareThreads=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;500&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;最小空闲线程数，初始化会达到该数值&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;maxIdleTime=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30000&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;最大线程空闲时长&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Tomcat Connector连接配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Connector&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;executor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tomcatThreadPool&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;线程池引用&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;port=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;请求访问端口&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.apache.coyote.http11.Http11NioProtocol&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;启用NIO协议&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;connectionTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5000&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;创建连接时长&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;keepAliveTimeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;连接活跃保持时长&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;redirectPort=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8443&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;SSL转发端口&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;acceptCount=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2000&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;额外的线程队列&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;maxConnections=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3000&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;最大连接线程数&lt;/span&gt;

           &lt;span class=&quot;na&quot;&gt;compression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;on&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;compressionMinSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2048&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;compressableMimeType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html,text/xml,text/plain,application/octet-stream&quot;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;启用响应报文压缩gzip&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;与此同时，我们还对服务容器所占用的内存空间进行了分配和调整：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tomcat Startup Properties启动参数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Configurations of JVM properties.
# In order to increase JVM heap memory.
# 
# Edited by chenjinlong 20161216
# 
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
-Xms512m             // Java Heap堆初始大小，默认是物理内存的1/64
-Xmx1024m            // Java Heap堆初始大小，建议可设为物理内存的一半，不可超过物理内存
-XX:MaxNewSize=128m  // 新生成的池的最大大小，默认32M
-XX:NewSize=64m      // 新生成的池的初始大小，默认2M
-XX:MaxPermSize=256m // 内存的永久保存区最大大小，默认64M
-XX:PermSize=128m    // 内存的永久保存区初始大小，默认64M

-Djava.rmi.server.hostname=127.0.0.1        // JMX监听主机设置
-Dcom.sun.management.jmxremote.port=32123   // JMX监听主机端口
-Dcom.sun.management.jmxremote.ssl=false    // 是否开启SSL开关
-Dcom.sun.management.jmxremote.authenticate=false&quot;&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;// 是否需要认证的开关&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在实践过程中发现，单个Tomcat实例在并行负载线程达到&amp;gt;3000之时，会使用到&lt;code class=&quot;highlighter-rouge&quot;&gt;acceptCount&lt;/code&gt;所设置的数值创建队列，将后进的线程排队到该队列内。 &lt;br /&gt;
但是同时也发现，当并行负载线程&amp;gt;3000之后，CPU和Head占用会大幅升高，响应时长也在爬高并超过实践过程中预设的1s（注：低负载情况下请求响应总时长为200-300ms）； &lt;br /&gt;
当并行负载线程&amp;gt;5000之后，Tocmat发生了假死状况（注：这里所说的假死，是处于一种Tomcat进程仍然存活，但是请求已不再执行和处理），Heap内存下降，CPU下降，此时的Tomcat其实已经和宕机无异。这些情况所发生的原因，其中有一点毋庸置疑的那就是，你增加Tomcat准入线程数的同时，也在增加CPU对于容器上下文切换频率，就会增加CPU的资源消耗，自然地，请求的响应时间也就越来越慢。所以一个合理的线程连接数是如此的关键。&lt;/p&gt;

&lt;p&gt;根据网络查询资料，许多IT从业者给出了近似的一些结论：如果需要考虑Tomcat在支撑并发数&amp;gt;1000以上，则可以引入分布式方案了。确实，系统稳定性是非常重要的。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;四、优劣势辨析&lt;/h4&gt;

&lt;p&gt;本次实践过程中采用的是“分布式事务 + CAS原子性操作函数”所实现的乐观锁解决方案。在阐述其中优劣势之前，我们先来了解下关于抢购系统的外观设计办法有哪些。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案一：抢购结果滞后反馈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一方案很典型地采用了异步处理的机制，虽然可以很大层面上解决访问压力的问题，但是会给人一种“暗箱操作”、“用户体验极其不好”的感觉。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-19-parallel-of-buying-scenario/14821468543527.jpg&quot; alt=&quot;&quot; /&gt;
* 方案二：抢购结果即刻响应&lt;/p&gt;

&lt;p&gt;如方案标题所阐述的那样，即刻给用户反馈抢购操作的结果。该方案有很好的用户体验，但是对于系统也同样有着很高的考验。例如如何杜绝商品超售超发等问题的发生，因为一旦发生了超售超发，也就意味着系统的问题正在引发经济上的亏损。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-19-parallel-of-buying-scenario/14821477756314.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本次实践中采用的是方案二的做法，如文章前面所述的流程图一样，采用的是乐观锁的实现思路。那么相对应的是否还有其他的实现思路，同样可以实现方案二呢？毋庸置疑，当然是有的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;思路一：悲观锁思路&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里无论你采用的是分布式锁（Distributed lock）还是监视器锁（Monitor lock），他们有一个共通的特点，那就是Mutex（互斥性）。在同一时间只允许一个访问者可以访问共享资源，其他访问者必须等到加锁的访问者释放锁之后才可进入临界区进行资源访问。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-19-parallel-of-buying-scenario/14821488683883.jpg&quot; alt=&quot;&quot; /&gt;
在上图形势下，当并发请求上升之时，每个请求都需要请求锁，而线程之间也存在着线程调度的情况，自然也会出现starvation的现象发生，驻留了很多优先级低的线程资源未能及时处理和释放。随着并发时间的流逝，服务容器一定会出现请求阻塞，响应时间延迟，容器资源占用率高，Heap内存溢出等问题的发生。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;思路二：队列的思路&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你对JDK中并发包有一定了解，这一思路一定非常熟悉，就是在阻塞性队列实现过程中，常常所需要用到的“生产者-消费者”的并发设计模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-19-parallel-of-buying-scenario/14821495463736.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图，这一思路优势是可以很快地处理并响应用户的抢购请求，只需要执行一些必要的过滤逻辑即可，舍去了关系型存储和其他存储的连接资源的请求和读写。劣势当然是有的，它过度依赖队列驻留在内存中的数据，一旦tomcat发生阻塞或者宕机，那么数据将永久丢失，这是灾难性的结果。另外，我们所应对的是并发的场景，队列的长度虽然可以设置为无上限，但是服务容器的资源是有限的，当消费速度小于请求速度之时，系统就逐渐迈向queue内存溢出的悬崖。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;思路三：乐观锁思路&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本次实践的正是乐观锁思路。所谓乐观，自然与悲观的理念是相反的。悲观的思路会将访问线程用锁这一介质的作用，使得线程进入阻塞和等待。乐观的思路，就是临界区的共享资源不需要锁的介入就可以随意访问和修改，没有任何阻塞性质的限定。在并发级别的分类当中，有一种并发的级别叫做“无等待”，这是终极乐观锁的一种体现。 &lt;br /&gt;
基本实现流程如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-12-19-parallel-of-buying-scenario/14821559358332.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很显然，乐观锁的思路，是一种无锁无等待的一种并发实现方式。可以使用事务CAS原子的特性来保障数据的准确性，避免了“超售超发”的问题发生。可以在请求线程并发过程中，无阻塞地进行抢购逻辑的处理。但是，与此同时引入了另外一个问题，它不可避免的会出现操作被事务性回退的现象，放在抢购场景下解释，就是一个请求进入事务之时，数据的无误可占用和消费的，但是当线程执行到提交事务一步时，数据版本出现了不一致（也就是其他的线程将商品占用并成功提交了事务），从而被定性为该请求抢购失败，即无效抢购。&lt;/p&gt;

&lt;p&gt;和前面所提及的队列的思路比较起来，乐观锁的思路所实现的结果是无序的。假设你需要去保证按时序进行分配抢购的产品，那么乐观锁并不适合这一诉求，有序队列的实现思路可能更为合适。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;五、小结一下&lt;/h4&gt;

&lt;p&gt;似乎也不需要总结太多，上文已经把整个方案过程中所涉及的考量和技术点都一一覆盖到了，可能会有些片面，或者有些阐述地比较粗糙，但毕竟这是一篇分享实现思路的文章而并非技术方案细节的文档，所以可以根据上述思路自行发散，有所参考，有所改进。&lt;/p&gt;

&lt;p&gt;如果你有更好的建议、方案或者是优化策略，不妨在留言板上写下你的想法。&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;六、参考资料&lt;/h4&gt;

&lt;p&gt;本篇文章有原创体会，也有网络资料参考，国内外均涉及，这里就不一一罗列了，可以自行根据“抢购”、“分布式锁(distributed lock)”、“高并发(concurrency/parallel computing)”、“阻塞队列(blocking queue)”等关键词进行检索和进一步学习。&lt;/p&gt;

&lt;p&gt;在此感谢伟大的Tim Berners-Lee、RMS(Richard Matthew Stallman)等业界大神，给世界带来了互联网，创造了开源的氛围和精神，让我们的信息得以共享。&lt;/p&gt;

</description>
				<pubDate>Mon, 19 Dec 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/12/19/parallel-of-buying-scenario/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/12/19/parallel-of-buying-scenario/</guid>
			</item>
		
			<item>
				<title>Git协作之合并代码</title>
				<description>&lt;p&gt;继上一次撰写GIT相关文章已经数月有余，半年来在团队内实践GIT的过程中，遇到了很多个人项目所不会接触到的疑问和问题，最为典型的无异于分支、代码之间的合并操作。本篇我们来讲一讲如何在本地仓库中做好多人协作过程中的分支代码合并。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;一、前言&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Git知识回顾&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在开始之前，如果你对于GIT的基础知识已经有些遗忘了，可以参考以下这几篇文章，知识都比较基础：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://aboutcoder.com/2014/06/29/git-basic-knowledge-1/&quot;&gt;GIT基础知识讲解（一）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aboutcoder.com/2014/06/29/git-basic-knowledge-2/&quot;&gt;GIT基础知识讲解（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你想将GIT流程应用到研发工作当中去，GIT流程是你必须要知道的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://aboutcoder.com/2015/11/16/work-in-git/&quot;&gt;Git软件开发过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望上面几篇文章可以帮助到你学习和回顾GIT应用知识。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;冲突产生的原因以及合并操作的原则&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你对Git有了以上方面的了解，那么在学习如何进行冲突解决之前，可以先了解为什么会产生冲突？ &lt;br /&gt;
冲突产生一般可分为如下四个方面：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;workdirectory的修改&lt;/li&gt;
  &lt;li&gt;index的修改&lt;/li&gt;
  &lt;li&gt;merge来源的修改&lt;/li&gt;
  &lt;li&gt;merge之前的修改(Been committed)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在merge manual中已经给出了一条合并操作的原则：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Command: git merge --help
Warning: Running git merge with non-trivial uncommitted changes is discouraged: while possible, it may leave you in a state that is hard to back out of in the case of a conflict.
// 简而言之，有未提交修改情况下，不要执行可能会冲突的操作！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在执行合并操作之前，保持workdirectory、index区域的clean特性，是非常必要的。当然，满足了这一前提，也并不代表就可以杜绝了冲突的可能。遵循该原则之后，解决的是1、2两点所产生的冲突可能，而前面所提及的3、4两点，是由于合并的操作所引入的冲突。  &lt;br /&gt;
其实很多操作都可能会产生冲突，但最根本原因都是因为&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt;，这两者是冲突的直接来源。例如如下操作都可能产生冲突，它们过程中也都包含了合并的性质：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rebase：重新设置基准，然后应用补丁&lt;/li&gt;
  &lt;li&gt;pull：会自动merge&lt;/li&gt;
  &lt;li&gt;repo sync：会自动rebase&lt;/li&gt;
  &lt;li&gt;cherry-pick：会应用补丁&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何保持workdirectory、index区域的clean特性，可以参考上文文章已经阐述到的&lt;code class=&quot;highlighter-rouge&quot;&gt;stash&lt;/code&gt;操作。在&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;过程中一旦发生冲突，往往会停滞在merging状态中，这个时候，我们可以使用：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 中止merge过程，该命令会尽可能恢复到merge操作之前的状态，但也可能恢复失败。
git merge --abort

// merge manual原文是这么解释的：
--abort
	Abort the current conflict resolution process, and try to reconstruct the pre-merge state.
	If there were uncommitted worktree changes present when the merge started, git merge --abort will &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;some cases be unable to reconstruct these changes.
	It is therefore recommended to always commit or stash your changes before running git merge.
	git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;二、合并代码之前，需要理解的概念&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. FETCH_HEAD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt;可以视为一个版本链接，或者说是版本commit-id的履历文件，该文件的路径在Git项目下的&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt;文件中。 &lt;br /&gt;
当运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch remote_repo src_branch&lt;/code&gt;类似的命令之时，将从远程repo获取分支的末端版本信息，记录到&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt;文件中：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ /jeromechan/project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗&amp;gt;git fetch origin &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;remote: Counting objects: 334, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
remote: Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;211/211&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
remote: Total 334 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 177&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 167 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 51&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Receiving objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;334/334&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 96.42 KiB | 0 bytes/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Resolving deltas: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;177/177&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, completed with 70 &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;objects.
From https://github.com/jeromechan/project
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; branch            &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;       -&amp;gt; FETCH_HEAD
   f5a095a..18b49aa  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;       -&amp;gt; origin/test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们看下&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt;文件内容：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ /jeromechan/project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗&amp;gt;vim .git/FETCH_HEAD

&lt;span class=&quot;c&quot;&gt;## 文件内容如下&lt;/span&gt;
18b49aaa008731ff17768d6b18905fc5865b3aa7  branch &lt;span class=&quot;s1&quot;&gt;&#39;test&#39;&lt;/span&gt; of https://github.com/jeromechan/project
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. git fetch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该命令可以将远程repo所包含的所有分支（或者指定分支）的最新commit-id记录到&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt;文件中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. git pull&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该命令是GIT更新local repo和working copy的文件。在之前的文章中，提及过&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull = git fetch + git merge FETCH_HEAD(by default)&lt;/code&gt;，这里就不再重复提及了，如果想复习了解，请看“前言”中列出的几篇GIT基础知识文章。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. commit-id&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;commit-id指的是每一次&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;操作所生成的每一个版本号，是一个能唯一标识一个版本的序列号。在使用git push后，这个序列号还会同步到远程repo。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;三、如何执行合并操作&lt;/h4&gt;

&lt;p&gt;这里举例两个常见的场景对合并操作进行解释。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 将相同分支下，已经产生分支冲突的代码，合并到本地working copy中&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这类场景下，由于分支是相同的，产生冲突无异于因为差异版本之间，相同的代码区块发生了相同位置的变更，然后冲突就这样产生了。 &lt;br /&gt;
这类冲突不难解决，可以使用交互式命令行&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;、Git-GUI客户端工具的rebase-from的操作，指定来源分支，借用其中的交互式操作，可以逐个逐个地进行&lt;code class=&quot;highlighter-rouge&quot;&gt;commit-id&lt;/code&gt;的代码合并。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 将其他分支B的代码差异，合并到当前工作分支A的working copy中&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这类场景常常发生在多人协作的实际工作中。例如需要将工作分支A的代码提交到分支B上，但分支B与工作分支A出现了不可合并的代码冲突，此时就需要将分支B的差异代码合并到当前的工作分支A中，然后再做提交与合并。&lt;/p&gt;

&lt;p&gt;这个时候，我们可以按照如下几个步骤进行：&lt;/p&gt;

&lt;p&gt;（1）git checkout A&lt;/p&gt;

&lt;p&gt;将当前工作分支切换到分支A。&lt;/p&gt;

&lt;p&gt;（2）git fetch https://github.com/jeromechan/project B&lt;/p&gt;

&lt;p&gt;将分支B的末端版本（HEAD）检出到FETCH_HEAD文件中。&lt;/p&gt;

&lt;p&gt;（3）git merge FETCH_HEAD&lt;/p&gt;

&lt;p&gt;基于本地&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/FETCH_HEAD&lt;/code&gt;记录，比对本地工作分支A的版本与FETCH_HEAD所记录的分支B末端版本信息，利用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;将分支B的差异内容合并更新到工作分支A中。 &lt;br /&gt;
此操作过程中如果出现conflicts，那么是需要开发者进行自助解决的。这一部分，如果是整体作accept合并，那么一定要留意“theirs”和“mine”的关系，“theirs”通常指的是来源代码分支（即当前示例所述的分支B），而“mine”便是你的本地分支A了。&lt;/p&gt;

&lt;p&gt;（4）git commit&lt;/p&gt;

&lt;p&gt;将当前合并下来的commit-id及其内容提交到A分支上。&lt;/p&gt;

&lt;p&gt;（5）git push https://github.com/jeromechan/project HEAD&lt;/p&gt;

&lt;p&gt;将提交的commit-id及其变更内容，推送到远程repo的分支A上。&lt;/p&gt;

&lt;p&gt;本篇到这里已阐述完。以上所述内容，一定可以帮助各位解决许多的合并代码的问题了。&lt;/p&gt;

</description>
				<pubDate>Tue, 06 Dec 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/12/06/git-fetch-among-branch/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/12/06/git-fetch-among-branch/</guid>
			</item>
		
			<item>
				<title>几种方法调用思路的比较</title>
				<description>&lt;p&gt;编码过程中，每天都在实现的事情，不是对象就是方法。那么如何去封装一个方法的入参呢？如果入参很多，是否有比较不一样的思路可以提高代码的复用性和可读性呢？下面谈谈在这一方面，近期学习到的一点知识。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;一、参数逐个罗列&lt;/h4&gt;

&lt;p&gt;假设有这么一个方法，方法参数很多，但都类似，我们可能需要把所有参数逐个逐个传入方法体内，就像这样：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * A common style of implementing a function.
 *
 * @param type1
 * @param type2
 * @param type3
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Test cases for explaining how to invoke a function.
 *
 * @author chenjinlong 20161202
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invokerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Initial parameters
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Call with separated parameters
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;二、列表形式批量传入&lt;/h4&gt;

&lt;p&gt;可能有的工程师觉得上面这种办法，会使得方法参数过多，不便于阅读和归类，列表的办法可能会更好，所以上面的逻辑也可以写成这样：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Another common style of implementing a function.
 *
 * @param typeList
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Test cases for explaining how to invoke a function.
 *
 * @author chenjinlong 20161202
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invokerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Initial parameters
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
     * Call with parameter list
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;vo&quot;&gt;三、对象VO的形式传入参数&lt;/h4&gt;

&lt;p&gt;可能还有的工程师觉得，塞个列表进来，其实也并不能将释义阐述清楚，每个列表值虽说都是byte，但是每个byte的含义都代表着不通的分支不通的含义。所以，对象的办法就引入进来了：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * An POJO-bean style of implementing a function.
 *
 * @param typeList
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeExplains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTypeOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTypeTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTypeThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Test cases for explaining how to invoke a function.
 *
 * @author chenjinlong 20161202
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invokerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Initial parameters
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
     * Call with parameter bean
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TypeExplains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTypeOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTypeTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTypeThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeExplains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;四、按位与&amp;amp;按位或 的方式传入参数&lt;/h4&gt;

&lt;p&gt;以上方式其实都可以达到相同的函数想要实现的目标，但是是否考虑过其他更为便捷的办法呢？最近就遇到这么一种比较创新的、特殊的、异类、不一样的、充分展现计算机知识学以致用的调用的模式：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Each of Keys must be strictly defined.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TYPE_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// equals to &quot;0001&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TYPE_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// equals to &quot;0010&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TYPE_3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// equals to &quot;0100&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TypeEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Using &amp;amp; and | features.
 *
 * @param type
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE_3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do some conditional processes.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Test cases for explaining how to invoke a function.
 *
 * @author chenjinlong 20161202
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invokerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Initial parameters
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Call with &amp;amp; and |
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种按位或传入，按位与判断获取的办法，着实为传入参数提供了截然不同的参考。当然，这种办法也不是适用于所有场景的。
按位与按位或的办法，使用于需要传入参数很多的，方法体内针对每个参数会包含着不一样分支逻辑的场景。该方式简化了方法体外“或关系”判断的逻辑，但另一方面也确实降低了代码的易读性。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;五、总结&lt;/h4&gt;

&lt;p&gt;其实以上谈到的四种模式中，没有哪一种是最好的。符合实践场景的、符合团队技术水平现实的、具备高内聚低耦合特点的，那就一定是最适合的。  &lt;br /&gt;
后续日子里，会就代码内部模式的实践上，发散开来谈谈如何编写可读性强的代码，然后再多po几篇文章分享出来。&lt;/p&gt;

</description>
				<pubDate>Fri, 02 Dec 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/12/02/funny-function-invoking-logic/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/12/02/funny-function-invoking-logic/</guid>
			</item>
		
			<item>
				<title>[译]Feature Toggle - Martin Fowler</title>
				<description>&lt;p&gt;关于&lt;a href=&quot;http://martinfowler.com/bliki/FeatureBranch.html&quot;&gt;FeatureBranch&lt;/a&gt;的一个较为争论的问题是，特性分支（Feature Branch）因为待发布功能（pending features）的原因，拉长了单一发布周期（single release cycle）。可以想象一下，你每两个周发布一次生产版本，但是同时又需要去维护一个例如说三个月才能进行发布的特性分支。那么你该如何去保障团队成员们在开发主线（mainline）上的工作不受到衍生出来的、未完全实现的特性分支的影响呢？这是一个非常常见的问题，这个时候，feature toggle就是这么一个应对这种场景的便捷工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-23-feature-toggle-translation/14731341981641.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（曾经见过许多相同含义的概念、名词：feature bits, flags, flippers, switches等等。这在领域上似乎还没有一个统一的概念、名称。）&lt;/p&gt;

&lt;p&gt;Feature toggle最基础的思路就是存在一个配置文件，配置文件里定义了许多的toggle，这些toggle都是待发布的特性功能。这一些toggle也正定义了哪一些features需要呈现，哪些并不需要。&lt;/p&gt;

&lt;p&gt;这其中许多的toggle大多数都会应用在拥有用户界面的应用上，假设你构建一个网站，其中使用了jsp，你可能会使用一些jsp标签包围在需要待发布的特性功能代码前后。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;toggle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;petSurvey&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Take our new &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;petSurvey&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;pet survey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/toggle&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类似以上的代码，当你将配置toggle的开关打开之时，features的功能将会随之打开，否则将会继续忽略features功能代码。虽然不一样的UI技术实现上会存在差异，但是基础的原理都是一样的。&lt;/p&gt;

&lt;p&gt;现实上往往还有一些特性功能，例如仅仅是引入一个新的价格算法，而这部分特性并没有对应的用户界面，纯粹是服务器端代码。对于这一情况，我们的toggle埋点可能会较为粗鲁和复杂，会直接将toggle codes耦合到系统应用层代码中，这将是比较忧虑的情况。&lt;/p&gt;

&lt;p&gt;Toggle埋点应该以最少的埋点量，实现新特性的完全隐藏或者开放。如上图pet survey的特性，pet survey可能会有非常多的功能界面，但是入口只有一处，就是在首页的地方。也正是单一的入口，toggle的埋点只需要在该处即可，并不需要在所有相关涉及的代码各处都埋点。如此一来，之后移除toggle埋点的工作将会非常地高效。假设发现你移除toggle埋点的时间耗费的非常多，那么请关注，其中所涉及的toggle埋点是否太多太复杂了，代码结构是否已经足够规范和逻辑化。请记住，尽管简单的条件判断来设置toggle是一件非常容易的事情，但是也同时要记得使用一些类似多态替换的办法，去减少一些没有必要、过于复杂的toggle埋点的方案。&lt;/p&gt;

&lt;p&gt;以往对于toggle的研究里，业界几乎都统称为“业务toggle”，而前面描述了那么多关于特性toggle的特点和办法，自此，可以将toggle分类为如下几种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;发布型：出现在生产环境上，用于开放或者隐藏部分特性功能的toggle；&lt;/li&gt;
  &lt;li&gt;体验型：即A/B testing，用于区分A、B方案的实际使用情况；&lt;/li&gt;
  &lt;li&gt;操作型：提供给操作员工的一系列特殊操作；&lt;/li&gt;
  &lt;li&gt;权限型：使得部分指定范围内的用户可以体验到新特性功能，而并不是面向全部用户。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大部分所见到的特性toggle都是在运行时设置的，当然，也有在编译时设置的。在编译时设置toggle，一个较小的优势是，它避免了toggle所涉及的特性功能代码被编译到生产发布的软件产品中。&lt;/p&gt;

&lt;p&gt;Toggle不仅仅方便我们对于产品功能的管理，它也是有风险的。例如某位工程师忘了将界面UI的特性功能放置到toggle的tag闭包标签中，那么这一功能将会暴露在外，测试工作将难以进行，设置了toggle将元素隐藏的时候，并没有实际隐藏，开关功能已经处于不正确的状态下。如果这类情况在生产环境上出现，将是不可接受的。&lt;/p&gt;

&lt;p&gt;谈到测试，大家比较关系的一个问题例如，如何对实现了toggle的系统进行测试验证？是否需要测试涉及toggle的所有场景？其实，对于一个发布型的toggle场景，只需要测试如下两类toggle使用情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下一版本中期望实现的toggle埋点&lt;/li&gt;
  &lt;li&gt;所有toggle都打开的场景&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上两点是发现多toggle集成bug的一个不错的好办法。&lt;/p&gt;

&lt;p&gt;还有一点非常重要的，已经正式投产的toggle功能，一定要今早将toggle代码从生产环境中移除，其中不仅仅包括toggle的配置文件，还包括所有相涉及的系统toggle代码。如若不今早移除，会出现一种情况类似于，某些时候无人可以识别出某toggle是何种用途何时添加的细节情况了。一个较为清晰的案例就是，有一个需要二次编译linux内核的特殊场景，以使得可以获得更多的命令行开关的处理能力，恰巧当时就忘了这一场景，这是非常让人揪心的。&lt;/p&gt;

&lt;h5 id=&quot;toggles&quot;&gt;发布型toggles是你最后需要去做的事情&lt;/h5&gt;

&lt;p&gt;发布型toggles是一个非常有用的技术手段，许多研发团队都在使用它。当你要将特性功能发布到生产之时，它可能是你最后需要去做的事情。&lt;/p&gt;

&lt;p&gt;当特性功能上线后的第一步，你需要去按照你的实际需求，打开toggle开关，使之特性功能在生产环境得以显露和使用。这种技术手段的好处在于，不需要你去频繁发布系统产品，便可以控制功能的上线与下线，更有利于在区间时间内收集真实用户的使用体验，收集用户反馈，这对于后续的产品特性功能的后续发展或者优化，都有着至关重要的作用。&lt;/p&gt;

&lt;p&gt;如果你的的确确需要隐藏一个局部的特性功能，最好的办法是将界面UI的功能入口关闭，直至最后一次UI代码的发布。对于纯服务端的代码，也可以采用这种方式，知道最后一次发布，再打开特性功能的可见入口。&lt;/p&gt;

&lt;p&gt;这种办法是一种优秀的可持续迭代，并且适合密集发布周期的项目。但是依然会有一些不可避免的短柄事实。前后端兼备的应用中，如此一来，在最后一次UI发布，或者后台服务端发布之前，你都将无法通过UI或者服务端入口进行toggle的测试和功能验证。当然，你也可以通过一些特殊的办法或者途径去间接地进行toggle特性的测试，例如服务端单元测试，亦或者是前端UI特性功能的某一后门入口。自然，这是不被推荐的。&lt;/p&gt;

&lt;p&gt;总结一下，当你不希望去密集性地为了发布或者下架特性功能而频繁上线的场景下，部署toggle场景将是一个非常不错的技术手段。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;进阶阅读材料&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你想要了解本篇文章图示的feature toggles的实际应用办法，可以参考这篇文章 &lt;a href=&quot;http://martinfowler.com/articles/feature-toggles.html&quot;&gt;Pete Hodgson’s article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;致谢&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;感谢Charles Bradley, Kent Beck and Christian Gruber通过tweets提醒我一些差点忘记的知识点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;版本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;更新与2016-02-12，以适应于Pete Hodgson’s article所描述的最新细节。&lt;/p&gt;

</description>
				<pubDate>Fri, 23 Sep 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/09/23/feature-toggle-translation/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/09/23/feature-toggle-translation/</guid>
			</item>
		
			<item>
				<title>读写分离的原则</title>
				<description>&lt;p&gt;&lt;img src=&quot;/images/2016-09-20-db-master-slave-pattern-rules/14743556033765.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;一、读写分离是什么？&lt;/h4&gt;

&lt;p&gt;简单了说，就是数据库一主一从/一主多从/多主多从的部署方式。先简单介绍下mysql的原生同步机制，其是将master的binlog期间的执行日志根据顺序，拷贝至slave的relaylog中，然后逐一解析和执行。&lt;/p&gt;

&lt;p&gt;读写分离的好处在于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;硬件处理能力得到了横向的扩增，拿机器和带宽换性能&lt;/li&gt;
  &lt;li&gt;降低了主库服务器的压力，提高并发性能&lt;/li&gt;
  &lt;li&gt;缓解读锁（S锁，共享锁，Shared Lock）和写锁（X锁，排他锁，Exclusive Lock）的竞争&lt;/li&gt;
  &lt;li&gt;系统运行性能得到间接的提升&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;二、如何判别是否需要读写分离？&lt;/h4&gt;

&lt;p&gt;谈及读写分离，必定要先了解怎样的应用层场景才需要使用到读写分离模式。以下是几点比较共性的场景特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以读操作为主的应用或者服务&lt;/li&gt;
  &lt;li&gt;可接受时间上短暂的信息延迟&lt;/li&gt;
  &lt;li&gt;单一线程内同时涵盖读写操作的，使用主库&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;三、常见的读写分离的方式有哪些？&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;中间件，例如java-amoeba&lt;/li&gt;
  &lt;li&gt;框架特性，例如spring-aop&lt;/li&gt;
  &lt;li&gt;自定义组件，例如在dal层的prepare过程，增加拦截代码，以执行数据源的路由逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;四、读写分离简单原则&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-20-db-master-slave-pattern-rules/14787121481232.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;五、参考文章&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://my.oschina.net/candiesyangyang/blog/203425&quot;&gt;为什么数据库读写分离可以提高性能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 20 Sep 2016 09:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/09/06/db-master-slave-pattern-rules/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/09/06/db-master-slave-pattern-rules/</guid>
			</item>
		
			<item>
				<title>关于PhpStorm+MAMP+xdebug集成失败的处理办法</title>
				<description>&lt;p&gt;首先，阐述一下我的开发环境配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacOS v10.11.6&lt;/li&gt;
  &lt;li&gt;MAMP PRO v3.5&lt;/li&gt;
  &lt;li&gt;PHP v5.3.29&lt;/li&gt;
  &lt;li&gt;Xdebug v2.2.7&lt;/li&gt;
  &lt;li&gt;PhpStorm 2016.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;近期对mamp作了次重装升级，之后遇到了xdebug无法正常启用的问题，在phpstorm中反馈的Event Log信息如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cannot accept external Xdebug connection: Cannot evaluate expression &#39;isset($_SERVER[&#39;PHP_IDE_CONFIG&#39;])&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看以上描述可以知道，是因为在建立Xdebug connection之时，无法找到变量&lt;code class=&quot;highlighter-rouge&quot;&gt;PHP_IDE_CONFIG&lt;/code&gt;的定义。&lt;br /&gt;
谈到这里，大家来看看php.ini中Xdebug的参数配置先：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[xdebug]
extension=xdebug.so

[xdebug]
MAMP_Xdebug_MAMP
 xdebug.remote_enable=1
 xdebug.remote_host=localhost
 xdebug.remote_port=9000
 xdebug.remote_autostart=1
 ;xdebug.profiler_enable=0
 ;xdebug.profiler_output_dir=&quot;/Applications/MAMP/tmp&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;xdebugphpstorm&quot;&gt;一、核实xdebug与phpstorm已建立关联关系&lt;/h4&gt;

&lt;p&gt;打开phpinfo()信息页面，xdebug扩展部分如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-01-integrate-phpstorm-mamp-xdebug/14727184774765.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以正常进行加载。但是问题来了，为什么phpstorm不能使用其进行debug过程呢？&lt;br /&gt;
不难发现，&lt;code class=&quot;highlighter-rouge&quot;&gt;IDE Key&lt;/code&gt;上显示的是&lt;code class=&quot;highlighter-rouge&quot;&gt;no value&lt;/code&gt;，这一方面说明了xdebug并没有正确地与phpstorm建立关联，即phpstorm即时发起xdebug connections，也无法正常连接并使用xdebug扩展。&lt;/p&gt;

&lt;p&gt;修正这个问题比较简单，增加xdebug扩展参数配置即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xdebug.idekey=&quot;PHPSTORM&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;xdebugzendextension&quot;&gt;二、确认xdebug使用的是zend_extension引入方式&lt;/h4&gt;

&lt;p&gt;php的扩展库有很多，主要分为两大类：php extension和zend extension。&lt;/p&gt;

&lt;p&gt;有的基于php module开发而成，有的基于zend engine开发而成（xdebug基于的就是zend引擎进行开发的），当然，也有的可以兼容两种引擎（memcache就是一个很好的兼容两种引擎的例子）。而这里要提到一个概念，php内核是基于zend engine的，zend engine从php3开始就在服务php内核的最后一道岗了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;通常我们称php extension为“modules”，称zend extension为“extensions”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下为大家扩展一下，php extension和zend extension的基本数据结构上的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;php extension(modules)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// php extension structures
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_module_entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_module_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_module_dep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_module_dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_module_entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_ini_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ini_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_module_dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_function_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_startup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INIT_FUNC_ARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_shutdown_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHUTDOWN_FUNC_ARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_startup_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INIT_FUNC_ARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_shutdown_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHUTDOWN_FUNC_ARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZEND_MODULE_INFO_FUNC_ARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globals_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef ZTS
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;ts_rsrc_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globals_id_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globals_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globals_ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TSRMLS_DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globals_dtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TSRMLS_DC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_deactivate_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_module_dep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* module name */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* version relationship: NULL (exists), lt|le|eq|ge|gt (to given version) */&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* version */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* dependency type */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;zend extension(extensions)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// zend extension structures
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_handler_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array_handler_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zend_op_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement_handler_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zend_op_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fcall_begin_handler_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zend_op_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fcall_end_handler_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zend_op_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array_ctor_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zend_op_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array_dtor_func_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zend_op_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_extension&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copyright&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;startup_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;shutdown_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;activate_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;deactivate_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;message_handler_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;op_array_handler_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_array_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;statement_handler_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fcall_begin_handler_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fcall_begin_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fcall_end_handler_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fcall_end_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;op_array_ctor_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_array_ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;op_array_dtor_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_array_dtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api_no_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_id_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserved3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserved4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserved5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserved6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserved7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserved8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
	&lt;span class=&quot;n&quot;&gt;DL_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_zend_extension_version_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_extension_api_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zend_extension_version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从加载顺序上分析，zend extension要早于php extension进行注册(register)，然而在激活(activate)阶段，却是php extension要早于zend extension被激活。&lt;br /&gt;
在两者的激活顺序上，有如下区别可以额外了解一下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;PHP extensions&lt;/strong&gt; in an order that make the dependencies be activated in a specific order. But remember that &lt;strong&gt;Zend extensions&lt;/strong&gt; are never sorted in any way. You must then declare them in the FIFO order in php.ini. The engine wont touch your declaration order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;zend_extension注册是调用的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;zend_register_extension()&lt;/code&gt;，而php extension注册是调用的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;zend_register_module_ex(zend_module_entry *module)&lt;/code&gt;进行注册。&lt;/p&gt;

&lt;p&gt;以下是两类扩展的生命周期图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-01-integrate-phpstorm-mamp-xdebug/14727201625932.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前面谈及了许多的关于php两类扩展的一些内部实现问题，其实对于这部分仅仅为了让开发者们更加深刻记得一点：“确认xdebug使用的是zend_extension引入方式”。&lt;/p&gt;

&lt;p&gt;这个时候，我们需要继续修改php.ini关于xdebug的引入配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;1.移除默认引入xdebug.so的php extension的方式
[xdebug]
;extension=xdebug.so

;2.更改为zend extension的方式对xdebug.so进行引入
[xdebug]
MAMP_Xdebug_MAMP
 zend_extension=&quot;/Applications/MAMP/bin/php/php5.3.29/lib/php/extensions/no-debug-non-zts-20090626/xdebug.so&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上可能你会疑惑，为什么一个写的是绝对路径，而一个写的是相对路径？&lt;br /&gt;
其实原因很简单，php extension约定了在加载之时可以使用相对于php.ini公共配置项目 &lt;code class=&quot;highlighter-rouge&quot;&gt;extension_dir&lt;/code&gt;的路径作为扩展路径；而zend extension则约定了使用全路径进行引入和加载。&lt;/p&gt;

&lt;h4 id=&quot;phpstormphp-web-application&quot;&gt;三、配置PhpStorm项目PHP Web Application&lt;/h4&gt;

&lt;p&gt;这部分不在赘述，正如title中所提到的，配置好PhpStorm项目PHP Web Application，就可以进行debug调试你的php脚本代码了。以下就简单的附上几张图示吧，供各位参考。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置：Run/Debug Configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-01-integrate-phpstorm-mamp-xdebug/14727221950526.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置：Servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-01-integrate-phpstorm-mamp-xdebug/14727223290574.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;操作：Start Listening Xdebug Connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-01-integrate-phpstorm-mamp-xdebug/14727235899205.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Debug界面一览&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-09-01-integrate-phpstorm-mamp-xdebug/14727237053026.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;备注：若各位看官有疑问或者建议，可以在文章末端的disqus留言，本人看到后会及时回复。感谢读者们阅读本篇文章。&lt;/em&gt;&lt;/p&gt;

</description>
				<pubDate>Thu, 01 Sep 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/09/01/integrate-phpstorm-mamp-xdebug/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/09/01/integrate-phpstorm-mamp-xdebug/</guid>
			</item>
		
			<item>
				<title>Git使用规范</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;以下是关于源代码版本控制的一些共通的约定、协议。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section&quot;&gt;一、管理仓库&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;避免将自己开发环境中的内容添加到版本控制系统中；&lt;/li&gt;
  &lt;li&gt;每当merge完成之后，删除本地以及远程的相应的特性分支；&lt;/li&gt;
  &lt;li&gt;只在特性分支中完成编码工作；&lt;/li&gt;
  &lt;li&gt;经常性的执行Rebase，使得upstream的变更及时合并到本地内容中；&lt;/li&gt;
  &lt;li&gt;发起pull request，使得代码得以他人评审。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;二、在特性分支工作&lt;/h4&gt;

&lt;p&gt;基于master，在本地创建特性分支。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master
git pull
git checkout -b &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;经常性的执行Rebase，使得upstream的变更及时合并到本地内容中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch origin
git rebase origin/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果出现冲突，应在Rebase过程中及时解决。&lt;br /&gt;
当特性分支编码完成、通过测试之后，这个时候，需要将内容提交到index storage，即index暂存区。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当你完成了内容的暂存，即以上的add操作，这个时候你便可以提交它了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
git commit --verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里有一个Tips，对阅读者友好的commit注释是非常必要的，例如以下，就是一则好的提交注释。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Present-tense summary under 50 characters

* More information about commit (under 72 characters).
* More information about commit (under 72 characters).

http://project.management-system.com/ticket/123
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你之前创建了多个commit，那么你应该使用交互式的Rebase操作，以更好地进行代码的合并，并且生成更为友好的提交注释。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i origin/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码提交完成之后，便是要将你提交的内容share给大家。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个时候，便是向你的团队小伙伴们提交pull request的时候了，请团队成员们帮忙评审自己所编写的代码。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;三、评审代码&lt;/h4&gt;

&lt;p&gt;邀请一个团队成员来评审自己的代码，是一个很好的发现缺陷issues的良策，还可以避免沟通上的遗漏和错误的传达。&lt;/p&gt;

&lt;p&gt;通过pull request的评审，可以使得评审的工作不仅限于项目组的讨论会议。&lt;/p&gt;

&lt;p&gt;另外，评审人员也可以自行作出代码变更和修改，只需要将变更内容检出到自己本地的分支。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;
./bin/setup
git diff staging/master..HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当评审人员在自己的branch上修改完毕，测试通过，提交commit并且push到远程origin分支中。&lt;br /&gt;
对所有变更满意之后，就可以在pull request中备注注释：&lt;code class=&quot;highlighter-rouge&quot;&gt;Ready to merge&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;四、代码合并&lt;/h4&gt;

&lt;p&gt;使用交互式的Rebase进行代码的衍合，在每一项衍合所产生的提交中，必要的时候将注释丰富，例如增加message&lt;code class=&quot;highlighter-rouge&quot;&gt;Fix whitespace&lt;/code&gt;的备注。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch origin
git rebase -i origin/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;倘若你force push你的commit(s)到master，倘若你所使用的平台是GitHub，那么GitHub将自动地关闭你的pull request，同时标记该pull request为”Merged”状态。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push --force-with-lease origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;说到这里，可能各位看官会疑惑，为什么这里引用了&lt;code class=&quot;highlighter-rouge&quot;&gt;--force-with-lease&lt;/code&gt;这么一个git push的option呢？&lt;/p&gt;

&lt;p&gt;下面介绍下这个参数是什么用途：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--[no-]force-with-lease
--force-with-lease=&amp;lt;refname&amp;gt;
--force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt;
Usually, &quot;git push&quot; refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.

This option overrides this restriction if the current value of the remote ref is the expected value. &quot;git push&quot; fails otherwise.

Imagine that you have to rebase what you have already published. You will have to bypass the &quot;must fast-forward&quot; rule in order to replace the history you originally published with the rebased history. If somebody else built on top of your original history while you are rebasing, the tip of the branch at the remote may advance with her commit, and blindly pushing with --force will lose her work.

This option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no other people did anything to the ref. It is like taking a &quot;lease&quot; on the ref without explicitly locking it, and the remote ref is updated only if the &quot;lease&quot; is still valid.

--force-with-lease alone, without specifying the details, will protect all remote refs that are going to be updated by requiring their current value to be the same as the remote-tracking branch we have for them.

--force-with-lease=&amp;lt;refname&amp;gt;, without specifying the expected value, will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the remote-tracking branch we have for it.

--force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt; will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the specified value &amp;lt;expect&amp;gt; (which is allowed to be different from the remote-tracking branch we have for the refname, or we do not even have to have such a remote-tracking branch when this form is used).

Note that all forms other than --force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt; that specifies the expected current value of the ref explicitly are still experimental and their semantics may change as we gain experience with this feature.

&quot;--no-force-with-lease&quot; will cancel all the previous --force-with-lease on the command line.

-f
--force
Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when --force-with-lease option is used, the command refuses to update a remote ref whose current value does not match what is expected.

This flag disables these checks, and can cause the remote repository to lose commits; use it with care.

Note that --force applies to all the refs that are pushed, hence using it with push.default set to matching or with multiple push destinations configured with remote.*.push may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a + in front of the refspec to push (e.g git push origin +master to force a push to the master branch). See the &amp;lt;refspec&amp;gt;... section above for details.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上大致的意思是指，在执行git push之时，增加&lt;code class=&quot;highlighter-rouge&quot;&gt;--force-with-lease&lt;/code&gt;参数，可以避免覆盖其他开发者在你fetch了之后，对目标分支做了其他的更新，然后你简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -f&lt;/code&gt;的操作强制覆盖了他人的commits内容。&lt;br /&gt;
如果想要了解&lt;code class=&quot;highlighter-rouge&quot;&gt;--force-with-lease&lt;/code&gt;参数更多的相关知识，可以查看这里Stack Overflow的例子: &lt;a href=&quot;http://stackoverflow.com/questions/5509543/how-do-i-properly-force-a-git-push&quot;&gt;How do I properly force a Git push?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;想要查看新提交的commit(s)列表，想要查看变更的文件列表，以及合并开发分支代码到master，以下命令可以实现这些目的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log origin/master..&amp;lt;branch-name&amp;gt;

git diff --stat origin/master

git checkout master
git merge &amp;lt;branch-name&amp;gt; --ff-only
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;特性分支代码既然都已然成功合并到master上，这个时候我们需要去删除特性分支，无论是本地工程目录，还是远程仓库。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Delete your remote feature branch.
git push origin --delete &amp;lt;branch-name&amp;gt;

# Delete your local feature branch.
git branch --delete &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-4&quot;&gt;五、参考资料&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/guides/tree/master/protocol/git&quot;&gt;Git Protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5509543/how-do-i-properly-force-a-git-push&quot;&gt;How do I properly force a Git push?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Sat, 27 Aug 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/08/27/git-protocol/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/08/27/git-protocol/</guid>
			</item>
		
			<item>
				<title>XRebel入门与实践</title>
				<description>&lt;h4 id=&quot;xrebel&quot;&gt;一、XRebel简介&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14721890028699.jpg&quot; alt=&quot;&quot; /&gt;
XRebel是一款轻量级的性能优化器，可以帮助开发者们主动去发现和修复一些通用性的问题。XRebel提供了即时的方式，使得开发者可以针对每一个独立的请求进行分析、定位一些诸如DB查询、session变更细节等。&lt;br /&gt;
XRebel支持当前众多的Java企业开发平台，只需要耗费一点点的时间，便可以非常简洁地集成到开发环境当中去。&lt;/p&gt;

&lt;p&gt;为什么开发者需要使用到XRebel呢？其实原因很简单。
许多开发者们都遇到过很多挣扎的事宜，例如为了寻找系统crash或者发现issues问题，不断地去确认编码逻辑，不断地去核实业务实现细节等等，是否有线程间通信安全问题，是否出现了未捕获异常等等。这些都是非常耗费时间精力的，而这些问题我们可以让其在整个软件开发过程中，暴露地更早。在软件开发周期中，问题暴露地越早，所花费的成本就会越低。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The severity of an issue is higher(obviously) if it is later in the development cycle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14721925857856.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XRebel正是为了让开发者们避免继续低效率地挣扎，遭遇节假日技术支持的困扰而诞生的性能优化工具。&lt;br /&gt;
它可以帮助开发者们在开发过程中，实时地检测所编程代码的效率参数和通信细节，XRebel只输出了开发者们所关心的关键监控参数细节，而一些无关的其他参数，它将智能地识别并且隐藏起来。&lt;br /&gt;
开发者们使用XRebel，并不需要频繁地切换系统程序和XRebel分析窗口，因为两者是分离开的。你可以在浏览器中的不同tab上打开对应的页面。这一点很好地提高了开发者的开发效率，方便了开发者在不同窗口内查看指定的数据。&lt;/p&gt;

&lt;p&gt;相对于其他的性能优化器产品，XRebel实现了开发、生产环境在代码监测层面上的零差异。开发环境所监测到的sql、session、exception、code trace log等等，无论是在development环境，或是在product环境，都是一致的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14721931961702.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而其他的一些产品，诸如JProfiler、APM，所监测到的数据大多基于CPU、Memory、Threads等方面，定位问题需要先找到对应的Thread，然后打开Thread Tree/Stack进行逐一排查，非常繁琐，并不是那么地简易操作。&lt;br /&gt;
恰恰XRebel解决了这个排查的技巧性问题。XRebel可以直接捕获到发生异常的代码行和exception detail，同时还可以查看发生该异常的请求之时，所涉及的sql、cache、queue、session等组件的交互情况，使得开发者更易于快速提高解决问题的效率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14721926122030.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;xrebel-1&quot;&gt;二、XRebel安装使用教程&lt;/h4&gt;

&lt;p&gt;前面介绍了关于XRebel的一些背景和特点，以下介绍XRebel的安装步骤及其Tips。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;首先要说明的一点，XRebel是一款收费工具，并非开源免费。
该工具值得你去购买，如果这笔款项不会影响你的生活质量。关于破解的方法，这里不做介绍，请自行Google。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;section&quot;&gt;下载与安装&lt;/h5&gt;

&lt;p&gt;1.从官网上下载XRebel压缩包（.zip）&lt;a href=&quot;http://zeroturnaround.com/software/xrebel/download/&quot;&gt;http://zeroturnaround.com/software/xrebel/download/&lt;/a&gt;。&lt;br /&gt;
如果你提前登陆了zeroturnaround.com，那么你所下载的zip包中就非常便捷地包含了你的帐号信息。&lt;/p&gt;

&lt;p&gt;2.解压zip包到指定的目录中，zip包中包含的内容如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14721938888446.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.将&lt;code class=&quot;highlighter-rouge&quot;&gt;xrebel.jar&lt;/code&gt;添加到应用服务容器的JVM参数中，添加时候确认路径是正确无误的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-javaagent:[path/to/]xrebel.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.启动应用服务容器，XRebel就会自动成功启动。&lt;br /&gt;
启动完成之后，打开浏览器，XRebel toolbar就会显示在你服务页面的左下角。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-05-20 16:29:42 XRebel: #####################################################
2016-05-20 16:29:42 XRebel:
2016-05-20 16:29:42 XRebel:  XRebel 3.1.1 (201605131009)
2016-05-20 16:29:42 XRebel:  (c) Copyright ZeroTurnaround AS, Estonia, Tallinn.
2016-05-20 16:29:42 XRebel:
2016-05-20 16:29:42 XRebel:  For questions and support,
2016-05-20 16:29:42 XRebel:  contact xrebel@zeroturnaround.com
2016-05-20 16:29:42 XRebel:
2016-05-20 16:29:42 XRebel: #####################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;license&quot;&gt;License激活&lt;/h5&gt;

&lt;p&gt;使用XRebel必须先激活，毕竟是收费工具。当然，在你购买前，你会拥有15天的评估试用期。&lt;br /&gt;
怎么激活呢？其实很简单，在你安装完XRebel之后，首次打开浏览器，以下窗口便会自动弹跳出来，根据提示进行License注册便是。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14721942799287.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;xrebelserver&quot;&gt;将XRebel集成到你的Server中&lt;/h5&gt;

&lt;p&gt;这里会有两个方面可以实践。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IDE集成&lt;/li&gt;
  &lt;li&gt;Server容器集成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下逐一介绍。首先第一种：IDE集成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Eclipse&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: 插件&lt;strong&gt;&lt;a href=&quot;http://manuals.zeroturnaround.com/xrebel/install/eclipse.html#xrebel-eclipse-install&quot;&gt;XRebel for Eclipse&lt;/a&gt;&lt;/strong&gt;已经在Marketplace提供下载。目前该插件仅支持Eclipse 3.6版本及以上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（1）打开Eclipse的 Run &amp;gt; Run Configurations…；&lt;br /&gt;
（2）选择Server服务容器，打开Arguments参数设置tab标签；&lt;br /&gt;
（3）将以下参数填写到VM arguments配置项目中；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-javaagent:[path/to/]xrebel.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722183417609.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（4）点击Apply应用并保存到当前的Run Configuration中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Intellij IDEA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1）打开IDEA的Run &amp;gt; Edit Configurations…；&lt;br /&gt;
（2）选择Server服务容器；&lt;br /&gt;
（3）将以下参数填写到VM arguments配置项目中；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-javaagent:[path/to/]xrebel.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722184711430.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（4）点击Apply应用并保存到当前的Run Configuration中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.NetBeans&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1）打开NetBeans的Tools &amp;gt; Servers；&lt;br /&gt;
（2）选择Server服务容器，打开Platform参数设置tab标签；&lt;br /&gt;
（3）将以下参数填写到VM arguments配置项目中；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-javaagent:[path/to/]xrebel.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722186661015.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（4）点击Close保存并关闭当前窗口。&lt;/p&gt;

&lt;p&gt;下面我们介绍第二种：Server容器集成。&lt;/p&gt;

&lt;p&gt;由于容器种类繁多，这里仅举例应用最为广泛的Tomcat上的应用，其他的容器配置可参考官方文章&lt;a href=&quot;http://manuals.zeroturnaround.com/xrebel/install/index.html#adding-the-xrebel-parameter-without-an-ide&quot;&gt;Adding-the-xrebel-parameter-without-an-ide&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Tomcat on Windows Platform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1）找到安装Tomcat的目录（即Tomcat home folder）；&lt;br /&gt;
（2）打开bin文件夹；&lt;br /&gt;
（3）新增一个可执行.bat文件，例如命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;catalina-xrebel.bat&lt;/code&gt;；&lt;br /&gt;
（4）将以下内容增加到第3步所创建好的.bat文件中；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@echo off
set JAVA_OPTS=-javaagent:[path/to/]xrebel.jar %JAVA_OPTS%
call &quot;%~dp0\catalina.bat&quot; %*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（5）执行以上.bat文件，启动Tomcat。&lt;/p&gt;

&lt;p&gt;PS: 需要将Tomcat以服务的方式启动着？可以打开tomcat包装器&lt;code class=&quot;highlighter-rouge&quot;&gt;tomcatXw.exe&lt;/code&gt;，在tomcatXw包装器的设置项目Java &amp;gt; Java Options中，新增如下参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-javaagent:[path/to/]xrebel.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.Tomcat on Mac OS and Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1）找到安装Tomcat的目录（即Tomcat home folder）；&lt;br /&gt;
（2）打开bin文件夹；&lt;br /&gt;
（3）新增一个可执行.sh文件，例如命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;catalina-xrebel.sh&lt;/code&gt;；&lt;br /&gt;
（4）将以下内容增加到第3步所创建好的.sh文件中；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-javaagent:[path/to/]xrebel.jar &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;dirname &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/catalina.sh &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（5）按照如下命令，执行以上.sh启动脚本，启动Tomcat。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./catalina-xrebel.sh run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;xrebel-2&quot;&gt;三、XRebel应用&lt;/h4&gt;

&lt;p&gt;经过前两部分的折腾，你应该已经可以成功启动XRebel了。下面我们来进一步介绍以下，如何去实际使用XRebel？XRebel到底给我们开发者提供了怎样的便捷特性？下面会逐一展开讲道。&lt;/p&gt;

&lt;p&gt;以下主界面非常明显地呈现出了Toolbar的位置，也是XRebel主要的操作菜单功能区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722230804350.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.第一大功能：Access application profiling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722233171431.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS：为了书写方便，这里暂且称之为AAP功能。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AAP功能包含的是系统服务所接收到的请求列表，以及每一个请求的时间消耗细节监测数据。该数据的统计维度是定位到Method级别的。&lt;br /&gt;
请跟随以下图示，对AAP功能有一个现状的概览印象，具体事宜可以在真实实践的时候进一步逐一了解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722236434252.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722237721529.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722238537773.jpg&quot; alt=&quot;&quot; /&gt;
查看AAP功能的栈信息之时，留意符号的含义。该符号标识了一个异步的执行请求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.第二大功能：Review IO query&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS：为了书写方便，这里暂且称之为RIQ功能。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;RIQ功能可以支持但不仅限于jdbc的监测。例如RabbitMQ、JMS、Redis等框架的执行数据的监控。&lt;br /&gt;
如第3张图示，清晰地监测到了请求中所包含的执行SQL语句，这一点对于开发、测试过程都是及其有帮助的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722233844623.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722239944661.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722243069603.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.第三大功能：Find exceptions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS：为了书写方便，这里暂且称之为FE功能。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;FE功能简单易懂，即异常日志的捕获。开发者们除了在slf4log、log4j等日志框架下定义好的路径中查看系统日志以外，还可以在系统程序运行时从XRebel中查看到即时的日志详情。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722234443155.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722244480081.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上介绍完了XRebel最为常用的三大功能点，关于session监控的部分，这里也截图一张说明一下，有需要的开发者可以自行研究，例如应用到CAS等用户登录相关场景之时，相信Session data这项功能是你非常好的监控助手。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Session data的功能需要从XRebel的Settings中打开配置选项，默认是不勾选的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722252061448.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此外这里再补充一点，也就是主界面三大功能的右上角&lt;code class=&quot;highlighter-rouge&quot;&gt;Hidden items&lt;/code&gt;选项。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016-08-26-xrebel-tutorial/14722246072371.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将该选项打上勾，便可以查看到操作过程中，开发者们标记了hidden的条目，以及XRebel智能隐藏的其他条目。具体看应用场景的需要。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;四、高级配置选项&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1.XRebel过滤名单&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XRebel允许配置一项黑名单列表，将不需要监测的class路径添加进去，即达到忽略的目的。&lt;br /&gt;
黑名单配置文件在这里：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.xrebel/traces-blacklist.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;XRebel还允许配置一项黑名单，以过滤&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;transient&lt;/code&gt;属性的大小，使之不影响所在对象Object的大小计算。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.xrebel/session-blacklist.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.XRebel启动参数&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.single_app_mode=true|false&lt;/code&gt; (default value: true) – Consider all deployments to be part of a single application. This reports activity from different deployment units to one and the same toolbar.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.injection.log_response=true|false&lt;/code&gt; (default: false) – When true, the content of HTTP servlet responses will be logged to xrebel.log. This is meant to help debug cases when XRebel toolbar is not properly injected into the application’s HTML.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.session.include_transient_fields=true|false&lt;/code&gt; (default value: false) – When true, fields with the transient modifier will be considered when constructing the session graph. By default, all transient fields are ignored and objects reachable only through transient fields are not considered to be part of the session.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.browser.console_log=true|false&lt;/code&gt; (default value: false) – When true, the client side XRebel log will be written into the browser console.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.injection=true|false&lt;/code&gt; (default value: true) – Disables the XRebel toolbar injection into application HTML. Add /xrebel to your application URL to view the toolbar in a separate tab (this opens the alternative UI view).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.traces.filter_resources=true|false&lt;/code&gt; (default value: true) – Prevents displaying resource requests in the Application profiling view.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.include_all_io=true|false&lt;/code&gt; (default value: true) – Enables the display of all detected IO events. Uncategorized IO events are displayed as Unidentified.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.sql.format=true|false&lt;/code&gt; (default value: true) – Enables formatting of SQL queries.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.traces.all=true|false&lt;/code&gt; (default value: false) – Enables tracing for all contexts.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.traces.jms=true|false&lt;/code&gt; (default value: false) – Enables tracing for JMS.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.traces.scheduler=true|false&lt;/code&gt; (default value: false) – Enables tracing for ScheduledExecutorService.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.traces.quartz=true|false&lt;/code&gt; (default value: false) – Enables tracing for Quartz.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.traces.rabbitmq=true|false&lt;/code&gt; (default value: false) – Enables tracing for RabbitMQ.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.XRebel特性Module配置参数&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.http.HttpURLConnection=true|false&lt;/code&gt; (default value: true) – Disables collecting IQ queries from java.net.HttpURLConnection usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.http.HttpCore=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Apache HttpCore 4.x usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.http.HttpClient3=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Apache HttpClient 3.x usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.mongodb=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from MongoDB driver usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.hbase=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from HBase driver usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.redis=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Redis driver usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.cassandra=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Cassandra driver usage.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.orm=true|false&lt;/code&gt; (default value: true) – Disables collecting information about ORM queries, including Hibernate JPA queries.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.equinox=true|false&lt;/code&gt; (default value: true) – Disables support for Equinox class loaders (boot delegation).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.rmi=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from RMI (java.rmi) remote object invocations.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.traces=true|false&lt;/code&gt; (default value: true) – Disables collecting all method calls during HTTP requests.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.session=true|false&lt;/code&gt; (default value: true) – Disables taking session snapshots.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.springloaded=true|false&lt;/code&gt; (default value: true) – Disables Spring Loaded agent when detected.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.async=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from asynchronously executed threads.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.quartz=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries within a Quartz job context.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.jms=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries within JMS MessageListener.onMessage() context.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.scheduler=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries for ScheduledThreadPoolExecutor tasks.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.rabbitmq=true|false&lt;/code&gt; (default value: true) – Disables collecting IO events within RabbitMQ consumer.handleDelivery() context and outgoing messages.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.remote_events=true|false&lt;/code&gt; (default value: true) – Disables collecting and displaying data from remote XRebel-enabled web services (microservices).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.jdbc=true|false&lt;/code&gt; (default value: true) – Disable collecting IO queries from JDBC usage.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.jdbc.sql=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from relational database JDBC usage. Requires -Dxrebel.module.jdbc to be true.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.jdbc.neo4j=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Neo4j JDBC usage. Requires -Dxrebel.module.jdbc to be true.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.jdbc.cassandra=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Cassandra JDBC usage. Requires -Dxrebel.module.jdbc to be true.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dxrebel.module.jdbc.phoenix=true|false&lt;/code&gt; (default value: true) – Disables collecting IO queries from Apache Phoenix (HBase) usage. Requires -Dxrebel.module.jdbc to be true.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;五、参考资料&lt;/h4&gt;

&lt;p&gt;本篇文章基于个人在近期实践XRebel过程中，所用到的知识归纳成文。&lt;br /&gt;
XRebel实用性极高，对自己在日常的开发中，方便了发现代码缺陷以及存在的性能隐患，所以作此一文推荐一番。&lt;/p&gt;

&lt;p&gt;具体官方资料可查阅：&lt;a href=&quot;http://manuals.zeroturnaround.com/xrebel/index.html&quot;&gt;http://manuals.zeroturnaround.com/xrebel/index.html&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Fri, 26 Aug 2016 17:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/08/26/xrebel-tutorial/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/08/26/xrebel-tutorial/</guid>
			</item>
		
			<item>
				<title>如何快速选择开源软件协议</title>
				<description>&lt;p&gt;&lt;img src=&quot;/images/2016-07-22-easy-chosing-opensource-license/14691964599348.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;一、背景介绍&lt;/h3&gt;
&lt;p&gt;目前开源协议有很多，同一款协议也衍生出了许多变种。开源世界中，我们可以使用合适的开源协议，保证自己作品的版权。 &lt;br /&gt;
我们这里不做过多的介绍，只介绍一些自己常用的三个选择及其理由，以供参考。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;二、详细描述&lt;/h3&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2.1 “我需要一个简单宽松的协议”&lt;/h4&gt;
&lt;p&gt;MIT License是一个简短、宽松、自由的协议。该协议允许人们使用你的代码，但必须要保留你的版权信息。与此同时，并不会给你带来任何责任和风险。&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;.NET Core&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Rails&lt;/code&gt;使用的均是MIT License。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The MIT License (MIT)
Copyright (c) &amp;lt;year&amp;gt; &amp;lt;copyright holders&amp;gt;

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;2.2 “我更加关心自己的专利”&lt;/h4&gt;
&lt;p&gt;Apache License 2.0是一项和MIT License相似的协议，但自己希望自己的专利能在开源免费使用的同时，保留自己在开源产品中的专利权益。同样，该协议要求使用者必须保留你的版权信息。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Apache&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;使用的均是Apache License 2.0协议。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Apache License Version 2.0
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-4&quot;&gt;2.3 “我关心代码的分享以及促进”&lt;/h4&gt;
&lt;p&gt;如果你希望别人在分享的自己的作品之后，也必须遵循相同的协议，也必须是开源和免费。那么GPLv3是你更好的选择。该协议当中也明确地包含了贡献人的专利权益方面的款项。原作品的版权条款也必须延续保留。GPL协议存在非常强的“传染性”
&lt;code class=&quot;highlighter-rouge&quot;&gt;Bash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GIMP&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Privacy Badger&lt;/code&gt;使用的均是GPLv3协议。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GNU GENERAL PUBLIC LICENSE Version 3
Copyright (C) {year}  {name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你的产品是基于终端的，你还可以加上如下一段，使得使用者知晓如何可以联系到你。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Copyright&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(C)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;comes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ABSOLUTELY&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;WARRANTY;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`show&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;w&#39;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;software,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;are&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;redistribute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;under&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;certain&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;conditions;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`show&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;details.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;三、参考资料&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Opensource License：&lt;a href=&quot;http://choosealicense.com/licenses/&quot;&gt;http://choosealicense.com/licenses/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;各种开源协议介绍：&lt;a href=&quot;http://www.open-open.com/solution/view/1319816219625&quot;&gt;http://www.open-open.com/solution/view/1319816219625&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;开源那么重要，开源协议你认识吗？&lt;a href=&quot;http://yeyuan.baijia.baidu.com/article/43303&quot;&gt;http://yeyuan.baijia.baidu.com/article/43303&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 22 Jul 2016 18:00:00 +0800</pubDate>
				<link>http://aboutcoder.com/2016/07/22/easy-chosing-opensource-license/</link>
				<guid isPermaLink="true">http://aboutcoder.com/2016/07/22/easy-chosing-opensource-license/</guid>
			</item>
		
	</channel>
</rss>